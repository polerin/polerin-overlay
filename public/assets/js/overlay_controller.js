/*! For license information please see overlay_controller.js.LICENSE.txt */
(()=>{var t={92:function(t,e,n){var r;t.exports=(r=r||function(t,e){var r;if("undefined"!=typeof window&&window.crypto&&(r=window.crypto),"undefined"!=typeof self&&self.crypto&&(r=self.crypto),"undefined"!=typeof globalThis&&globalThis.crypto&&(r=globalThis.crypto),!r&&"undefined"!=typeof window&&window.msCrypto&&(r=window.msCrypto),!r&&void 0!==n.g&&n.g.crypto&&(r=n.g.crypto),!r)try{r=n(984)}catch(t){}var i=function(){if(r){if("function"==typeof r.getRandomValues)try{return r.getRandomValues(new Uint32Array(1))[0]}catch(t){}if("function"==typeof r.randomBytes)try{return r.randomBytes(4).readInt32LE()}catch(t){}}throw new Error("Native crypto module could not be used to get secure random number.")},o=Object.create||function(){function t(){}return function(e){var n;return t.prototype=e,n=new t,t.prototype=null,n}}(),s={},a=s.lib={},u=a.Base={extend:function(t){var e=o(this);return t&&e.mixIn(t),e.hasOwnProperty("init")&&this.init!==e.init||(e.init=function(){e.$super.init.apply(this,arguments)}),e.init.prototype=e,e.$super=this,e},create:function(){var t=this.extend();return t.init.apply(t,arguments),t},init:function(){},mixIn:function(t){for(var e in t)t.hasOwnProperty(e)&&(this[e]=t[e]);t.hasOwnProperty("toString")&&(this.toString=t.toString)},clone:function(){return this.init.prototype.extend(this)}},c=a.WordArray=u.extend({init:function(t,e){t=this.words=t||[],this.sigBytes=null!=e?e:4*t.length},toString:function(t){return(t||f).stringify(this)},concat:function(t){var e=this.words,n=t.words,r=this.sigBytes,i=t.sigBytes;if(this.clamp(),r%4)for(var o=0;o<i;o++){var s=n[o>>>2]>>>24-o%4*8&255;e[r+o>>>2]|=s<<24-(r+o)%4*8}else for(var a=0;a<i;a+=4)e[r+a>>>2]=n[a>>>2];return this.sigBytes+=i,this},clamp:function(){var e=this.words,n=this.sigBytes;e[n>>>2]&=4294967295<<32-n%4*8,e.length=t.ceil(n/4)},clone:function(){var t=u.clone.call(this);return t.words=this.words.slice(0),t},random:function(t){for(var e=[],n=0;n<t;n+=4)e.push(i());return new c.init(e,t)}}),l=s.enc={},f=l.Hex={stringify:function(t){for(var e=t.words,n=t.sigBytes,r=[],i=0;i<n;i++){var o=e[i>>>2]>>>24-i%4*8&255;r.push((o>>>4).toString(16)),r.push((15&o).toString(16))}return r.join("")},parse:function(t){for(var e=t.length,n=[],r=0;r<e;r+=2)n[r>>>3]|=parseInt(t.substr(r,2),16)<<24-r%8*4;return new c.init(n,e/2)}},h=l.Latin1={stringify:function(t){for(var e=t.words,n=t.sigBytes,r=[],i=0;i<n;i++){var o=e[i>>>2]>>>24-i%4*8&255;r.push(String.fromCharCode(o))}return r.join("")},parse:function(t){for(var e=t.length,n=[],r=0;r<e;r++)n[r>>>2]|=(255&t.charCodeAt(r))<<24-r%4*8;return new c.init(n,e)}},p=l.Utf8={stringify:function(t){try{return decodeURIComponent(escape(h.stringify(t)))}catch(t){throw new Error("Malformed UTF-8 data")}},parse:function(t){return h.parse(unescape(encodeURIComponent(t)))}},d=a.BufferedBlockAlgorithm=u.extend({reset:function(){this._data=new c.init,this._nDataBytes=0},_append:function(t){"string"==typeof t&&(t=p.parse(t)),this._data.concat(t),this._nDataBytes+=t.sigBytes},_process:function(e){var n,r=this._data,i=r.words,o=r.sigBytes,s=this.blockSize,a=o/(4*s),u=(a=e?t.ceil(a):t.max((0|a)-this._minBufferSize,0))*s,l=t.min(4*u,o);if(u){for(var f=0;f<u;f+=s)this._doProcessBlock(i,f);n=i.splice(0,u),r.sigBytes-=l}return new c.init(n,l)},clone:function(){var t=u.clone.call(this);return t._data=this._data.clone(),t},_minBufferSize:0}),v=(a.Hasher=d.extend({cfg:u.extend(),init:function(t){this.cfg=this.cfg.extend(t),this.reset()},reset:function(){d.reset.call(this),this._doReset()},update:function(t){return this._append(t),this._process(),this},finalize:function(t){return t&&this._append(t),this._doFinalize()},blockSize:16,_createHelper:function(t){return function(e,n){return new t.init(n).finalize(e)}},_createHmacHelper:function(t){return function(e,n){return new v.HMAC.init(t,n).finalize(e)}}}),s.algo={});return s}(Math),r)},306:function(t,e,n){var r,i,o;t.exports=(r=n(92),o=(i=r).lib.WordArray,i.enc.Base64={stringify:function(t){var e=t.words,n=t.sigBytes,r=this._map;t.clamp();for(var i=[],o=0;o<n;o+=3)for(var s=(e[o>>>2]>>>24-o%4*8&255)<<16|(e[o+1>>>2]>>>24-(o+1)%4*8&255)<<8|e[o+2>>>2]>>>24-(o+2)%4*8&255,a=0;a<4&&o+.75*a<n;a++)i.push(r.charAt(s>>>6*(3-a)&63));var u=r.charAt(64);if(u)for(;i.length%4;)i.push(u);return i.join("")},parse:function(t){var e=t.length,n=this._map,r=this._reverseMap;if(!r){r=this._reverseMap=[];for(var i=0;i<n.length;i++)r[n.charCodeAt(i)]=i}var s=n.charAt(64);if(s){var a=t.indexOf(s);-1!==a&&(e=a)}return function(t,e,n){for(var r=[],i=0,s=0;s<e;s++)if(s%4){var a=n[t.charCodeAt(s-1)]<<s%4*2|n[t.charCodeAt(s)]>>>6-s%4*2;r[i>>>2]|=a<<24-i%4*8,i++}return o.create(r,i)}(t,e,r)},_map:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="},r.enc.Base64)},830:function(t,e,n){var r;t.exports=(r=n(92),function(t){var e=r,n=e.lib,i=n.WordArray,o=n.Hasher,s=e.algo,a=[],u=[];!function(){function e(e){for(var n=t.sqrt(e),r=2;r<=n;r++)if(!(e%r))return!1;return!0}function n(t){return 4294967296*(t-(0|t))|0}for(var r=2,i=0;i<64;)e(r)&&(i<8&&(a[i]=n(t.pow(r,.5))),u[i]=n(t.pow(r,1/3)),i++),r++}();var c=[],l=s.SHA256=o.extend({_doReset:function(){this._hash=new i.init(a.slice(0))},_doProcessBlock:function(t,e){for(var n=this._hash.words,r=n[0],i=n[1],o=n[2],s=n[3],a=n[4],l=n[5],f=n[6],h=n[7],p=0;p<64;p++){if(p<16)c[p]=0|t[e+p];else{var d=c[p-15],v=(d<<25|d>>>7)^(d<<14|d>>>18)^d>>>3,g=c[p-2],y=(g<<15|g>>>17)^(g<<13|g>>>19)^g>>>10;c[p]=v+c[p-7]+y+c[p-16]}var _=r&i^r&o^i&o,m=(r<<30|r>>>2)^(r<<19|r>>>13)^(r<<10|r>>>22),b=h+((a<<26|a>>>6)^(a<<21|a>>>11)^(a<<7|a>>>25))+(a&l^~a&f)+u[p]+c[p];h=f,f=l,l=a,a=s+b|0,s=o,o=i,i=r,r=b+(m+_)|0}n[0]=n[0]+r|0,n[1]=n[1]+i|0,n[2]=n[2]+o|0,n[3]=n[3]+s|0,n[4]=n[4]+a|0,n[5]=n[5]+l|0,n[6]=n[6]+f|0,n[7]=n[7]+h|0},_doFinalize:function(){var e=this._data,n=e.words,r=8*this._nDataBytes,i=8*e.sigBytes;return n[i>>>5]|=128<<24-i%32,n[14+(i+64>>>9<<4)]=t.floor(r/4294967296),n[15+(i+64>>>9<<4)]=r,e.sigBytes=4*n.length,this._process(),this._hash},clone:function(){var t=o.clone.call(this);return t._hash=this._hash.clone(),t}});e.SHA256=o._createHelper(l),e.HmacSHA256=o._createHmacHelper(l)}(Math),r.SHA256)},299:(t,e,n)=>{e.formatArgs=function(e){if(e[0]=(this.useColors?"%c":"")+this.namespace+(this.useColors?" %c":" ")+e[0]+(this.useColors?"%c ":" ")+"+"+t.exports.humanize(this.diff),!this.useColors)return;const n="color: "+this.color;e.splice(1,0,n,"color: inherit");let r=0,i=0;e[0].replace(/%[a-zA-Z%]/g,(t=>{"%%"!==t&&(r++,"%c"===t&&(i=r))})),e.splice(i,0,n)},e.save=function(t){try{t?e.storage.setItem("debug",t):e.storage.removeItem("debug")}catch(t){}},e.load=function(){let t;try{t=e.storage.getItem("debug")}catch(t){}return!t&&"undefined"!=typeof process&&"env"in process&&(t=process.env.DEBUG),t},e.useColors=function(){return!("undefined"==typeof window||!window.process||"renderer"!==window.process.type&&!window.process.__nwjs)||("undefined"==typeof navigator||!navigator.userAgent||!navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))&&("undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/))},e.storage=function(){try{return localStorage}catch(t){}}(),e.destroy=(()=>{let t=!1;return()=>{t||(t=!0,console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."))}})(),e.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],e.log=console.debug||console.log||(()=>{}),t.exports=n(193)(e);const{formatters:r}=t.exports;r.j=function(t){try{return JSON.stringify(t)}catch(t){return"[UnexpectedJSONParseError]: "+t.message}}},193:(t,e,n)=>{t.exports=function(t){function e(t){let n,i,o,s=null;function a(...t){if(!a.enabled)return;const r=a,i=Number(new Date),o=i-(n||i);r.diff=o,r.prev=n,r.curr=i,n=i,t[0]=e.coerce(t[0]),"string"!=typeof t[0]&&t.unshift("%O");let s=0;t[0]=t[0].replace(/%([a-zA-Z%])/g,((n,i)=>{if("%%"===n)return"%";s++;const o=e.formatters[i];if("function"==typeof o){const e=t[s];n=o.call(r,e),t.splice(s,1),s--}return n})),e.formatArgs.call(r,t),(r.log||e.log).apply(r,t)}return a.namespace=t,a.useColors=e.useColors(),a.color=e.selectColor(t),a.extend=r,a.destroy=e.destroy,Object.defineProperty(a,"enabled",{enumerable:!0,configurable:!1,get:()=>null!==s?s:(i!==e.namespaces&&(i=e.namespaces,o=e.enabled(t)),o),set:t=>{s=t}}),"function"==typeof e.init&&e.init(a),a}function r(t,n){const r=e(this.namespace+(void 0===n?":":n)+t);return r.log=this.log,r}function i(t){return t.toString().substring(2,t.toString().length-2).replace(/\.\*\?$/,"*")}return e.debug=e,e.default=e,e.coerce=function(t){return t instanceof Error?t.stack||t.message:t},e.disable=function(){const t=[...e.names.map(i),...e.skips.map(i).map((t=>"-"+t))].join(",");return e.enable(""),t},e.enable=function(t){let n;e.save(t),e.namespaces=t,e.names=[],e.skips=[];const r=("string"==typeof t?t:"").split(/[\s,]+/),i=r.length;for(n=0;n<i;n++)r[n]&&("-"===(t=r[n].replace(/\*/g,".*?"))[0]?e.skips.push(new RegExp("^"+t.slice(1)+"$")):e.names.push(new RegExp("^"+t+"$")))},e.enabled=function(t){if("*"===t[t.length-1])return!0;let n,r;for(n=0,r=e.skips.length;n<r;n++)if(e.skips[n].test(t))return!1;for(n=0,r=e.names.length;n<r;n++)if(e.names[n].test(t))return!0;return!1},e.humanize=n(304),e.destroy=function(){console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.")},Object.keys(t).forEach((n=>{e[n]=t[n]})),e.names=[],e.skips=[],e.formatters={},e.selectColor=function(t){let n=0;for(let e=0;e<t.length;e++)n=(n<<5)-n+t.charCodeAt(e),n|=0;return e.colors[Math.abs(n)%e.colors.length]},e.enable(e.load()),e}},86:t=>{"use strict";var e=Object.prototype.hasOwnProperty,n="~";function r(){}function i(t,e,n){this.fn=t,this.context=e,this.once=n||!1}function o(t,e,r,o,s){if("function"!=typeof r)throw new TypeError("The listener must be a function");var a=new i(r,o||t,s),u=n?n+e:e;return t._events[u]?t._events[u].fn?t._events[u]=[t._events[u],a]:t._events[u].push(a):(t._events[u]=a,t._eventsCount++),t}function s(t,e){0==--t._eventsCount?t._events=new r:delete t._events[e]}function a(){this._events=new r,this._eventsCount=0}Object.create&&(r.prototype=Object.create(null),(new r).__proto__||(n=!1)),a.prototype.eventNames=function(){var t,r,i=[];if(0===this._eventsCount)return i;for(r in t=this._events)e.call(t,r)&&i.push(n?r.slice(1):r);return Object.getOwnPropertySymbols?i.concat(Object.getOwnPropertySymbols(t)):i},a.prototype.listeners=function(t){var e=n?n+t:t,r=this._events[e];if(!r)return[];if(r.fn)return[r.fn];for(var i=0,o=r.length,s=new Array(o);i<o;i++)s[i]=r[i].fn;return s},a.prototype.listenerCount=function(t){var e=n?n+t:t,r=this._events[e];return r?r.fn?1:r.length:0},a.prototype.emit=function(t,e,r,i,o,s){var a=n?n+t:t;if(!this._events[a])return!1;var u,c,l=this._events[a],f=arguments.length;if(l.fn){switch(l.once&&this.removeListener(t,l.fn,void 0,!0),f){case 1:return l.fn.call(l.context),!0;case 2:return l.fn.call(l.context,e),!0;case 3:return l.fn.call(l.context,e,r),!0;case 4:return l.fn.call(l.context,e,r,i),!0;case 5:return l.fn.call(l.context,e,r,i,o),!0;case 6:return l.fn.call(l.context,e,r,i,o,s),!0}for(c=1,u=new Array(f-1);c<f;c++)u[c-1]=arguments[c];l.fn.apply(l.context,u)}else{var h,p=l.length;for(c=0;c<p;c++)switch(l[c].once&&this.removeListener(t,l[c].fn,void 0,!0),f){case 1:l[c].fn.call(l[c].context);break;case 2:l[c].fn.call(l[c].context,e);break;case 3:l[c].fn.call(l[c].context,e,r);break;case 4:l[c].fn.call(l[c].context,e,r,i);break;default:if(!u)for(h=1,u=new Array(f-1);h<f;h++)u[h-1]=arguments[h];l[c].fn.apply(l[c].context,u)}}return!0},a.prototype.on=function(t,e,n){return o(this,t,e,n,!1)},a.prototype.once=function(t,e,n){return o(this,t,e,n,!0)},a.prototype.removeListener=function(t,e,r,i){var o=n?n+t:t;if(!this._events[o])return this;if(!e)return s(this,o),this;var a=this._events[o];if(a.fn)a.fn!==e||i&&!a.once||r&&a.context!==r||s(this,o);else{for(var u=0,c=[],l=a.length;u<l;u++)(a[u].fn!==e||i&&!a[u].once||r&&a[u].context!==r)&&c.push(a[u]);c.length?this._events[o]=1===c.length?c[0]:c:s(this,o)}return this},a.prototype.removeAllListeners=function(t){var e;return t?(e=n?n+t:t,this._events[e]&&s(this,e)):(this._events=new r,this._eventsCount=0),this},a.prototype.off=a.prototype.removeListener,a.prototype.addListener=a.prototype.on,a.prefixed=n,a.EventEmitter=a,t.exports=a},171:(t,e,n)=>{var r=null;"undefined"!=typeof WebSocket?r=WebSocket:"undefined"!=typeof MozWebSocket?r=MozWebSocket:void 0!==n.g?r=n.g.WebSocket||n.g.MozWebSocket:"undefined"!=typeof window?r=window.WebSocket||window.MozWebSocket:"undefined"!=typeof self&&(r=self.WebSocket||self.MozWebSocket),t.exports=r},608:function(t,e,n){var r;t=n.nmd(t),function(){var i,o="Expected a function",s="__lodash_hash_undefined__",a="__lodash_placeholder__",u=32,c=128,l=1/0,f=9007199254740991,h=NaN,p=4294967295,d=[["ary",c],["bind",1],["bindKey",2],["curry",8],["curryRight",16],["flip",512],["partial",u],["partialRight",64],["rearg",256]],v="[object Arguments]",g="[object Array]",y="[object Boolean]",_="[object Date]",m="[object Error]",b="[object Function]",w="[object GeneratorFunction]",C="[object Map]",k="[object Number]",S="[object Object]",A="[object Promise]",x="[object RegExp]",$="[object Set]",E="[object String]",O="[object Symbol]",R="[object WeakMap]",T="[object ArrayBuffer]",j="[object DataView]",P="[object Float32Array]",M="[object Float64Array]",I="[object Int8Array]",F="[object Int16Array]",N="[object Int32Array]",B="[object Uint8Array]",U="[object Uint8ClampedArray]",z="[object Uint16Array]",L="[object Uint32Array]",W=/\b__p \+= '';/g,D=/\b(__p \+=) '' \+/g,H=/(__e\(.*?\)|\b__t\)) \+\n'';/g,q=/&(?:amp|lt|gt|quot|#39);/g,V=/[&<>"']/g,J=RegExp(q.source),Z=RegExp(V.source),G=/<%-([\s\S]+?)%>/g,K=/<%([\s\S]+?)%>/g,Q=/<%=([\s\S]+?)%>/g,Y=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,X=/^\w*$/,tt=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,et=/[\\^$.*+?()[\]{}|]/g,nt=RegExp(et.source),rt=/^\s+/,it=/\s/,ot=/\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,st=/\{\n\/\* \[wrapped with (.+)\] \*/,at=/,? & /,ut=/[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g,ct=/[()=,{}\[\]\/\s]/,lt=/\\(\\)?/g,ft=/\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g,ht=/\w*$/,pt=/^[-+]0x[0-9a-f]+$/i,dt=/^0b[01]+$/i,vt=/^\[object .+?Constructor\]$/,gt=/^0o[0-7]+$/i,yt=/^(?:0|[1-9]\d*)$/,_t=/[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g,mt=/($^)/,bt=/['\n\r\u2028\u2029\\]/g,wt="\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff",Ct="a-z\\xdf-\\xf6\\xf8-\\xff",kt="A-Z\\xc0-\\xd6\\xd8-\\xde",St="\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",At="["+St+"]",xt="["+wt+"]",$t="\\d+",Et="["+Ct+"]",Ot="[^\\ud800-\\udfff"+St+$t+"\\u2700-\\u27bf"+Ct+kt+"]",Rt="\\ud83c[\\udffb-\\udfff]",Tt="[^\\ud800-\\udfff]",jt="(?:\\ud83c[\\udde6-\\uddff]){2}",Pt="[\\ud800-\\udbff][\\udc00-\\udfff]",Mt="["+kt+"]",It="(?:"+Et+"|"+Ot+")",Ft="(?:"+Mt+"|"+Ot+")",Nt="(?:['’](?:d|ll|m|re|s|t|ve))?",Bt="(?:['’](?:D|LL|M|RE|S|T|VE))?",Ut="(?:"+xt+"|"+Rt+")?",zt="[\\ufe0e\\ufe0f]?",Lt=zt+Ut+"(?:\\u200d(?:"+[Tt,jt,Pt].join("|")+")"+zt+Ut+")*",Wt="(?:"+["[\\u2700-\\u27bf]",jt,Pt].join("|")+")"+Lt,Dt="(?:"+[Tt+xt+"?",xt,jt,Pt,"[\\ud800-\\udfff]"].join("|")+")",Ht=RegExp("['’]","g"),qt=RegExp(xt,"g"),Vt=RegExp(Rt+"(?="+Rt+")|"+Dt+Lt,"g"),Jt=RegExp([Mt+"?"+Et+"+"+Nt+"(?="+[At,Mt,"$"].join("|")+")",Ft+"+"+Bt+"(?="+[At,Mt+It,"$"].join("|")+")",Mt+"?"+It+"+"+Nt,Mt+"+"+Bt,"\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])","\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])",$t,Wt].join("|"),"g"),Zt=RegExp("[\\u200d\\ud800-\\udfff"+wt+"\\ufe0e\\ufe0f]"),Gt=/[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/,Kt=["Array","Buffer","DataView","Date","Error","Float32Array","Float64Array","Function","Int8Array","Int16Array","Int32Array","Map","Math","Object","Promise","RegExp","Set","String","Symbol","TypeError","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","WeakMap","_","clearTimeout","isFinite","parseInt","setTimeout"],Qt=-1,Yt={};Yt[P]=Yt[M]=Yt[I]=Yt[F]=Yt[N]=Yt[B]=Yt[U]=Yt[z]=Yt[L]=!0,Yt[v]=Yt[g]=Yt[T]=Yt[y]=Yt[j]=Yt[_]=Yt[m]=Yt[b]=Yt[C]=Yt[k]=Yt[S]=Yt[x]=Yt[$]=Yt[E]=Yt[R]=!1;var Xt={};Xt[v]=Xt[g]=Xt[T]=Xt[j]=Xt[y]=Xt[_]=Xt[P]=Xt[M]=Xt[I]=Xt[F]=Xt[N]=Xt[C]=Xt[k]=Xt[S]=Xt[x]=Xt[$]=Xt[E]=Xt[O]=Xt[B]=Xt[U]=Xt[z]=Xt[L]=!0,Xt[m]=Xt[b]=Xt[R]=!1;var te={"\\":"\\","'":"'","\n":"n","\r":"r","\u2028":"u2028","\u2029":"u2029"},ee=parseFloat,ne=parseInt,re="object"==typeof n.g&&n.g&&n.g.Object===Object&&n.g,ie="object"==typeof self&&self&&self.Object===Object&&self,oe=re||ie||Function("return this")(),se=e&&!e.nodeType&&e,ae=se&&t&&!t.nodeType&&t,ue=ae&&ae.exports===se,ce=ue&&re.process,le=function(){try{return ae&&ae.require&&ae.require("util").types||ce&&ce.binding&&ce.binding("util")}catch(t){}}(),fe=le&&le.isArrayBuffer,he=le&&le.isDate,pe=le&&le.isMap,de=le&&le.isRegExp,ve=le&&le.isSet,ge=le&&le.isTypedArray;function ye(t,e,n){switch(n.length){case 0:return t.call(e);case 1:return t.call(e,n[0]);case 2:return t.call(e,n[0],n[1]);case 3:return t.call(e,n[0],n[1],n[2])}return t.apply(e,n)}function _e(t,e,n,r){for(var i=-1,o=null==t?0:t.length;++i<o;){var s=t[i];e(r,s,n(s),t)}return r}function me(t,e){for(var n=-1,r=null==t?0:t.length;++n<r&&!1!==e(t[n],n,t););return t}function be(t,e){for(var n=null==t?0:t.length;n--&&!1!==e(t[n],n,t););return t}function we(t,e){for(var n=-1,r=null==t?0:t.length;++n<r;)if(!e(t[n],n,t))return!1;return!0}function Ce(t,e){for(var n=-1,r=null==t?0:t.length,i=0,o=[];++n<r;){var s=t[n];e(s,n,t)&&(o[i++]=s)}return o}function ke(t,e){return!(null==t||!t.length)&&Pe(t,e,0)>-1}function Se(t,e,n){for(var r=-1,i=null==t?0:t.length;++r<i;)if(n(e,t[r]))return!0;return!1}function Ae(t,e){for(var n=-1,r=null==t?0:t.length,i=Array(r);++n<r;)i[n]=e(t[n],n,t);return i}function xe(t,e){for(var n=-1,r=e.length,i=t.length;++n<r;)t[i+n]=e[n];return t}function $e(t,e,n,r){var i=-1,o=null==t?0:t.length;for(r&&o&&(n=t[++i]);++i<o;)n=e(n,t[i],i,t);return n}function Ee(t,e,n,r){var i=null==t?0:t.length;for(r&&i&&(n=t[--i]);i--;)n=e(n,t[i],i,t);return n}function Oe(t,e){for(var n=-1,r=null==t?0:t.length;++n<r;)if(e(t[n],n,t))return!0;return!1}var Re=Ne("length");function Te(t,e,n){var r;return n(t,(function(t,n,i){if(e(t,n,i))return r=n,!1})),r}function je(t,e,n,r){for(var i=t.length,o=n+(r?1:-1);r?o--:++o<i;)if(e(t[o],o,t))return o;return-1}function Pe(t,e,n){return e==e?function(t,e,n){for(var r=n-1,i=t.length;++r<i;)if(t[r]===e)return r;return-1}(t,e,n):je(t,Ie,n)}function Me(t,e,n,r){for(var i=n-1,o=t.length;++i<o;)if(r(t[i],e))return i;return-1}function Ie(t){return t!=t}function Fe(t,e){var n=null==t?0:t.length;return n?ze(t,e)/n:h}function Ne(t){return function(e){return null==e?i:e[t]}}function Be(t){return function(e){return null==t?i:t[e]}}function Ue(t,e,n,r,i){return i(t,(function(t,i,o){n=r?(r=!1,t):e(n,t,i,o)})),n}function ze(t,e){for(var n,r=-1,o=t.length;++r<o;){var s=e(t[r]);s!==i&&(n=n===i?s:n+s)}return n}function Le(t,e){for(var n=-1,r=Array(t);++n<t;)r[n]=e(n);return r}function We(t){return t?t.slice(0,an(t)+1).replace(rt,""):t}function De(t){return function(e){return t(e)}}function He(t,e){return Ae(e,(function(e){return t[e]}))}function qe(t,e){return t.has(e)}function Ve(t,e){for(var n=-1,r=t.length;++n<r&&Pe(e,t[n],0)>-1;);return n}function Je(t,e){for(var n=t.length;n--&&Pe(e,t[n],0)>-1;);return n}function Ze(t,e){for(var n=t.length,r=0;n--;)t[n]===e&&++r;return r}var Ge=Be({À:"A",Á:"A",Â:"A",Ã:"A",Ä:"A",Å:"A",à:"a",á:"a",â:"a",ã:"a",ä:"a",å:"a",Ç:"C",ç:"c",Ð:"D",ð:"d",È:"E",É:"E",Ê:"E",Ë:"E",è:"e",é:"e",ê:"e",ë:"e",Ì:"I",Í:"I",Î:"I",Ï:"I",ì:"i",í:"i",î:"i",ï:"i",Ñ:"N",ñ:"n",Ò:"O",Ó:"O",Ô:"O",Õ:"O",Ö:"O",Ø:"O",ò:"o",ó:"o",ô:"o",õ:"o",ö:"o",ø:"o",Ù:"U",Ú:"U",Û:"U",Ü:"U",ù:"u",ú:"u",û:"u",ü:"u",Ý:"Y",ý:"y",ÿ:"y",Æ:"Ae",æ:"ae",Þ:"Th",þ:"th",ß:"ss",Ā:"A",Ă:"A",Ą:"A",ā:"a",ă:"a",ą:"a",Ć:"C",Ĉ:"C",Ċ:"C",Č:"C",ć:"c",ĉ:"c",ċ:"c",č:"c",Ď:"D",Đ:"D",ď:"d",đ:"d",Ē:"E",Ĕ:"E",Ė:"E",Ę:"E",Ě:"E",ē:"e",ĕ:"e",ė:"e",ę:"e",ě:"e",Ĝ:"G",Ğ:"G",Ġ:"G",Ģ:"G",ĝ:"g",ğ:"g",ġ:"g",ģ:"g",Ĥ:"H",Ħ:"H",ĥ:"h",ħ:"h",Ĩ:"I",Ī:"I",Ĭ:"I",Į:"I",İ:"I",ĩ:"i",ī:"i",ĭ:"i",į:"i",ı:"i",Ĵ:"J",ĵ:"j",Ķ:"K",ķ:"k",ĸ:"k",Ĺ:"L",Ļ:"L",Ľ:"L",Ŀ:"L",Ł:"L",ĺ:"l",ļ:"l",ľ:"l",ŀ:"l",ł:"l",Ń:"N",Ņ:"N",Ň:"N",Ŋ:"N",ń:"n",ņ:"n",ň:"n",ŋ:"n",Ō:"O",Ŏ:"O",Ő:"O",ō:"o",ŏ:"o",ő:"o",Ŕ:"R",Ŗ:"R",Ř:"R",ŕ:"r",ŗ:"r",ř:"r",Ś:"S",Ŝ:"S",Ş:"S",Š:"S",ś:"s",ŝ:"s",ş:"s",š:"s",Ţ:"T",Ť:"T",Ŧ:"T",ţ:"t",ť:"t",ŧ:"t",Ũ:"U",Ū:"U",Ŭ:"U",Ů:"U",Ű:"U",Ų:"U",ũ:"u",ū:"u",ŭ:"u",ů:"u",ű:"u",ų:"u",Ŵ:"W",ŵ:"w",Ŷ:"Y",ŷ:"y",Ÿ:"Y",Ź:"Z",Ż:"Z",Ž:"Z",ź:"z",ż:"z",ž:"z",Ĳ:"IJ",ĳ:"ij",Œ:"Oe",œ:"oe",ŉ:"'n",ſ:"s"}),Ke=Be({"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;"});function Qe(t){return"\\"+te[t]}function Ye(t){return Zt.test(t)}function Xe(t){var e=-1,n=Array(t.size);return t.forEach((function(t,r){n[++e]=[r,t]})),n}function tn(t,e){return function(n){return t(e(n))}}function en(t,e){for(var n=-1,r=t.length,i=0,o=[];++n<r;){var s=t[n];s!==e&&s!==a||(t[n]=a,o[i++]=n)}return o}function nn(t){var e=-1,n=Array(t.size);return t.forEach((function(t){n[++e]=t})),n}function rn(t){var e=-1,n=Array(t.size);return t.forEach((function(t){n[++e]=[t,t]})),n}function on(t){return Ye(t)?function(t){for(var e=Vt.lastIndex=0;Vt.test(t);)++e;return e}(t):Re(t)}function sn(t){return Ye(t)?function(t){return t.match(Vt)||[]}(t):function(t){return t.split("")}(t)}function an(t){for(var e=t.length;e--&&it.test(t.charAt(e)););return e}var un=Be({"&amp;":"&","&lt;":"<","&gt;":">","&quot;":'"',"&#39;":"'"}),cn=function t(e){var n,r=(e=null==e?oe:cn.defaults(oe.Object(),e,cn.pick(oe,Kt))).Array,it=e.Date,wt=e.Error,Ct=e.Function,kt=e.Math,St=e.Object,At=e.RegExp,xt=e.String,$t=e.TypeError,Et=r.prototype,Ot=Ct.prototype,Rt=St.prototype,Tt=e["__core-js_shared__"],jt=Ot.toString,Pt=Rt.hasOwnProperty,Mt=0,It=(n=/[^.]+$/.exec(Tt&&Tt.keys&&Tt.keys.IE_PROTO||""))?"Symbol(src)_1."+n:"",Ft=Rt.toString,Nt=jt.call(St),Bt=oe._,Ut=At("^"+jt.call(Pt).replace(et,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),zt=ue?e.Buffer:i,Lt=e.Symbol,Wt=e.Uint8Array,Dt=zt?zt.allocUnsafe:i,Vt=tn(St.getPrototypeOf,St),Zt=St.create,te=Rt.propertyIsEnumerable,re=Et.splice,ie=Lt?Lt.isConcatSpreadable:i,se=Lt?Lt.iterator:i,ae=Lt?Lt.toStringTag:i,ce=function(){try{var t=co(St,"defineProperty");return t({},"",{}),t}catch(t){}}(),le=e.clearTimeout!==oe.clearTimeout&&e.clearTimeout,Re=it&&it.now!==oe.Date.now&&it.now,Be=e.setTimeout!==oe.setTimeout&&e.setTimeout,ln=kt.ceil,fn=kt.floor,hn=St.getOwnPropertySymbols,pn=zt?zt.isBuffer:i,dn=e.isFinite,vn=Et.join,gn=tn(St.keys,St),yn=kt.max,_n=kt.min,mn=it.now,bn=e.parseInt,wn=kt.random,Cn=Et.reverse,kn=co(e,"DataView"),Sn=co(e,"Map"),An=co(e,"Promise"),xn=co(e,"Set"),$n=co(e,"WeakMap"),En=co(St,"create"),On=$n&&new $n,Rn={},Tn=Uo(kn),jn=Uo(Sn),Pn=Uo(An),Mn=Uo(xn),In=Uo($n),Fn=Lt?Lt.prototype:i,Nn=Fn?Fn.valueOf:i,Bn=Fn?Fn.toString:i;function Un(t){if(na(t)&&!qs(t)&&!(t instanceof Dn)){if(t instanceof Wn)return t;if(Pt.call(t,"__wrapped__"))return zo(t)}return new Wn(t)}var zn=function(){function t(){}return function(e){if(!ea(e))return{};if(Zt)return Zt(e);t.prototype=e;var n=new t;return t.prototype=i,n}}();function Ln(){}function Wn(t,e){this.__wrapped__=t,this.__actions__=[],this.__chain__=!!e,this.__index__=0,this.__values__=i}function Dn(t){this.__wrapped__=t,this.__actions__=[],this.__dir__=1,this.__filtered__=!1,this.__iteratees__=[],this.__takeCount__=p,this.__views__=[]}function Hn(t){var e=-1,n=null==t?0:t.length;for(this.clear();++e<n;){var r=t[e];this.set(r[0],r[1])}}function qn(t){var e=-1,n=null==t?0:t.length;for(this.clear();++e<n;){var r=t[e];this.set(r[0],r[1])}}function Vn(t){var e=-1,n=null==t?0:t.length;for(this.clear();++e<n;){var r=t[e];this.set(r[0],r[1])}}function Jn(t){var e=-1,n=null==t?0:t.length;for(this.__data__=new Vn;++e<n;)this.add(t[e])}function Zn(t){var e=this.__data__=new qn(t);this.size=e.size}function Gn(t,e){var n=qs(t),r=!n&&Hs(t),i=!n&&!r&&Gs(t),o=!n&&!r&&!i&&la(t),s=n||r||i||o,a=s?Le(t.length,xt):[],u=a.length;for(var c in t)!e&&!Pt.call(t,c)||s&&("length"==c||i&&("offset"==c||"parent"==c)||o&&("buffer"==c||"byteLength"==c||"byteOffset"==c)||yo(c,u))||a.push(c);return a}function Kn(t){var e=t.length;return e?t[Vr(0,e-1)]:i}function Qn(t,e){return Mo($i(t),sr(e,0,t.length))}function Yn(t){return Mo($i(t))}function Xn(t,e,n){(n!==i&&!Ls(t[e],n)||n===i&&!(e in t))&&ir(t,e,n)}function tr(t,e,n){var r=t[e];Pt.call(t,e)&&Ls(r,n)&&(n!==i||e in t)||ir(t,e,n)}function er(t,e){for(var n=t.length;n--;)if(Ls(t[n][0],e))return n;return-1}function nr(t,e,n,r){return fr(t,(function(t,i,o){e(r,t,n(t),o)})),r}function rr(t,e){return t&&Ei(e,ja(e),t)}function ir(t,e,n){"__proto__"==e&&ce?ce(t,e,{configurable:!0,enumerable:!0,value:n,writable:!0}):t[e]=n}function or(t,e){for(var n=-1,o=e.length,s=r(o),a=null==t;++n<o;)s[n]=a?i:$a(t,e[n]);return s}function sr(t,e,n){return t==t&&(n!==i&&(t=t<=n?t:n),e!==i&&(t=t>=e?t:e)),t}function ar(t,e,n,r,o,s){var a,u=1&e,c=2&e,l=4&e;if(n&&(a=o?n(t,r,o,s):n(t)),a!==i)return a;if(!ea(t))return t;var f=qs(t);if(f){if(a=function(t){var e=t.length,n=new t.constructor(e);return e&&"string"==typeof t[0]&&Pt.call(t,"index")&&(n.index=t.index,n.input=t.input),n}(t),!u)return $i(t,a)}else{var h=ho(t),p=h==b||h==w;if(Gs(t))return wi(t,u);if(h==S||h==v||p&&!o){if(a=c||p?{}:vo(t),!u)return c?function(t,e){return Ei(t,fo(t),e)}(t,function(t,e){return t&&Ei(e,Pa(e),t)}(a,t)):function(t,e){return Ei(t,lo(t),e)}(t,rr(a,t))}else{if(!Xt[h])return o?t:{};a=function(t,e,n){var r,i=t.constructor;switch(e){case T:return Ci(t);case y:case _:return new i(+t);case j:return function(t,e){var n=e?Ci(t.buffer):t.buffer;return new t.constructor(n,t.byteOffset,t.byteLength)}(t,n);case P:case M:case I:case F:case N:case B:case U:case z:case L:return ki(t,n);case C:return new i;case k:case E:return new i(t);case x:return function(t){var e=new t.constructor(t.source,ht.exec(t));return e.lastIndex=t.lastIndex,e}(t);case $:return new i;case O:return r=t,Nn?St(Nn.call(r)):{}}}(t,h,u)}}s||(s=new Zn);var d=s.get(t);if(d)return d;s.set(t,a),aa(t)?t.forEach((function(r){a.add(ar(r,e,n,r,t,s))})):ra(t)&&t.forEach((function(r,i){a.set(i,ar(r,e,n,i,t,s))}));var g=f?i:(l?c?no:eo:c?Pa:ja)(t);return me(g||t,(function(r,i){g&&(r=t[i=r]),tr(a,i,ar(r,e,n,i,t,s))})),a}function ur(t,e,n){var r=n.length;if(null==t)return!r;for(t=St(t);r--;){var o=n[r],s=e[o],a=t[o];if(a===i&&!(o in t)||!s(a))return!1}return!0}function cr(t,e,n){if("function"!=typeof t)throw new $t(o);return Ro((function(){t.apply(i,n)}),e)}function lr(t,e,n,r){var i=-1,o=ke,s=!0,a=t.length,u=[],c=e.length;if(!a)return u;n&&(e=Ae(e,De(n))),r?(o=Se,s=!1):e.length>=200&&(o=qe,s=!1,e=new Jn(e));t:for(;++i<a;){var l=t[i],f=null==n?l:n(l);if(l=r||0!==l?l:0,s&&f==f){for(var h=c;h--;)if(e[h]===f)continue t;u.push(l)}else o(e,f,r)||u.push(l)}return u}Un.templateSettings={escape:G,evaluate:K,interpolate:Q,variable:"",imports:{_:Un}},Un.prototype=Ln.prototype,Un.prototype.constructor=Un,Wn.prototype=zn(Ln.prototype),Wn.prototype.constructor=Wn,Dn.prototype=zn(Ln.prototype),Dn.prototype.constructor=Dn,Hn.prototype.clear=function(){this.__data__=En?En(null):{},this.size=0},Hn.prototype.delete=function(t){var e=this.has(t)&&delete this.__data__[t];return this.size-=e?1:0,e},Hn.prototype.get=function(t){var e=this.__data__;if(En){var n=e[t];return n===s?i:n}return Pt.call(e,t)?e[t]:i},Hn.prototype.has=function(t){var e=this.__data__;return En?e[t]!==i:Pt.call(e,t)},Hn.prototype.set=function(t,e){var n=this.__data__;return this.size+=this.has(t)?0:1,n[t]=En&&e===i?s:e,this},qn.prototype.clear=function(){this.__data__=[],this.size=0},qn.prototype.delete=function(t){var e=this.__data__,n=er(e,t);return!(n<0||(n==e.length-1?e.pop():re.call(e,n,1),--this.size,0))},qn.prototype.get=function(t){var e=this.__data__,n=er(e,t);return n<0?i:e[n][1]},qn.prototype.has=function(t){return er(this.__data__,t)>-1},qn.prototype.set=function(t,e){var n=this.__data__,r=er(n,t);return r<0?(++this.size,n.push([t,e])):n[r][1]=e,this},Vn.prototype.clear=function(){this.size=0,this.__data__={hash:new Hn,map:new(Sn||qn),string:new Hn}},Vn.prototype.delete=function(t){var e=ao(this,t).delete(t);return this.size-=e?1:0,e},Vn.prototype.get=function(t){return ao(this,t).get(t)},Vn.prototype.has=function(t){return ao(this,t).has(t)},Vn.prototype.set=function(t,e){var n=ao(this,t),r=n.size;return n.set(t,e),this.size+=n.size==r?0:1,this},Jn.prototype.add=Jn.prototype.push=function(t){return this.__data__.set(t,s),this},Jn.prototype.has=function(t){return this.__data__.has(t)},Zn.prototype.clear=function(){this.__data__=new qn,this.size=0},Zn.prototype.delete=function(t){var e=this.__data__,n=e.delete(t);return this.size=e.size,n},Zn.prototype.get=function(t){return this.__data__.get(t)},Zn.prototype.has=function(t){return this.__data__.has(t)},Zn.prototype.set=function(t,e){var n=this.__data__;if(n instanceof qn){var r=n.__data__;if(!Sn||r.length<199)return r.push([t,e]),this.size=++n.size,this;n=this.__data__=new Vn(r)}return n.set(t,e),this.size=n.size,this};var fr=Ti(mr),hr=Ti(br,!0);function pr(t,e){var n=!0;return fr(t,(function(t,r,i){return n=!!e(t,r,i)})),n}function dr(t,e,n){for(var r=-1,o=t.length;++r<o;){var s=t[r],a=e(s);if(null!=a&&(u===i?a==a&&!ca(a):n(a,u)))var u=a,c=s}return c}function vr(t,e){var n=[];return fr(t,(function(t,r,i){e(t,r,i)&&n.push(t)})),n}function gr(t,e,n,r,i){var o=-1,s=t.length;for(n||(n=go),i||(i=[]);++o<s;){var a=t[o];e>0&&n(a)?e>1?gr(a,e-1,n,r,i):xe(i,a):r||(i[i.length]=a)}return i}var yr=ji(),_r=ji(!0);function mr(t,e){return t&&yr(t,e,ja)}function br(t,e){return t&&_r(t,e,ja)}function wr(t,e){return Ce(e,(function(e){return Ys(t[e])}))}function Cr(t,e){for(var n=0,r=(e=yi(e,t)).length;null!=t&&n<r;)t=t[Bo(e[n++])];return n&&n==r?t:i}function kr(t,e,n){var r=e(t);return qs(t)?r:xe(r,n(t))}function Sr(t){return null==t?t===i?"[object Undefined]":"[object Null]":ae&&ae in St(t)?function(t){var e=Pt.call(t,ae),n=t[ae];try{t[ae]=i;var r=!0}catch(t){}var o=Ft.call(t);return r&&(e?t[ae]=n:delete t[ae]),o}(t):function(t){return Ft.call(t)}(t)}function Ar(t,e){return t>e}function xr(t,e){return null!=t&&Pt.call(t,e)}function $r(t,e){return null!=t&&e in St(t)}function Er(t,e,n){for(var o=n?Se:ke,s=t[0].length,a=t.length,u=a,c=r(a),l=1/0,f=[];u--;){var h=t[u];u&&e&&(h=Ae(h,De(e))),l=_n(h.length,l),c[u]=!n&&(e||s>=120&&h.length>=120)?new Jn(u&&h):i}h=t[0];var p=-1,d=c[0];t:for(;++p<s&&f.length<l;){var v=h[p],g=e?e(v):v;if(v=n||0!==v?v:0,!(d?qe(d,g):o(f,g,n))){for(u=a;--u;){var y=c[u];if(!(y?qe(y,g):o(t[u],g,n)))continue t}d&&d.push(g),f.push(v)}}return f}function Or(t,e,n){var r=null==(t=xo(t,e=yi(e,t)))?t:t[Bo(Qo(e))];return null==r?i:ye(r,t,n)}function Rr(t){return na(t)&&Sr(t)==v}function Tr(t,e,n,r,o){return t===e||(null==t||null==e||!na(t)&&!na(e)?t!=t&&e!=e:function(t,e,n,r,o,s){var a=qs(t),u=qs(e),c=a?g:ho(t),l=u?g:ho(e),f=(c=c==v?S:c)==S,h=(l=l==v?S:l)==S,p=c==l;if(p&&Gs(t)){if(!Gs(e))return!1;a=!0,f=!1}if(p&&!f)return s||(s=new Zn),a||la(t)?Xi(t,e,n,r,o,s):function(t,e,n,r,i,o,s){switch(n){case j:if(t.byteLength!=e.byteLength||t.byteOffset!=e.byteOffset)return!1;t=t.buffer,e=e.buffer;case T:return!(t.byteLength!=e.byteLength||!o(new Wt(t),new Wt(e)));case y:case _:case k:return Ls(+t,+e);case m:return t.name==e.name&&t.message==e.message;case x:case E:return t==e+"";case C:var a=Xe;case $:var u=1&r;if(a||(a=nn),t.size!=e.size&&!u)return!1;var c=s.get(t);if(c)return c==e;r|=2,s.set(t,e);var l=Xi(a(t),a(e),r,i,o,s);return s.delete(t),l;case O:if(Nn)return Nn.call(t)==Nn.call(e)}return!1}(t,e,c,n,r,o,s);if(!(1&n)){var d=f&&Pt.call(t,"__wrapped__"),b=h&&Pt.call(e,"__wrapped__");if(d||b){var w=d?t.value():t,A=b?e.value():e;return s||(s=new Zn),o(w,A,n,r,s)}}return!!p&&(s||(s=new Zn),function(t,e,n,r,o,s){var a=1&n,u=eo(t),c=u.length;if(c!=eo(e).length&&!a)return!1;for(var l=c;l--;){var f=u[l];if(!(a?f in e:Pt.call(e,f)))return!1}var h=s.get(t),p=s.get(e);if(h&&p)return h==e&&p==t;var d=!0;s.set(t,e),s.set(e,t);for(var v=a;++l<c;){var g=t[f=u[l]],y=e[f];if(r)var _=a?r(y,g,f,e,t,s):r(g,y,f,t,e,s);if(!(_===i?g===y||o(g,y,n,r,s):_)){d=!1;break}v||(v="constructor"==f)}if(d&&!v){var m=t.constructor,b=e.constructor;m==b||!("constructor"in t)||!("constructor"in e)||"function"==typeof m&&m instanceof m&&"function"==typeof b&&b instanceof b||(d=!1)}return s.delete(t),s.delete(e),d}(t,e,n,r,o,s))}(t,e,n,r,Tr,o))}function jr(t,e,n,r){var o=n.length,s=o,a=!r;if(null==t)return!s;for(t=St(t);o--;){var u=n[o];if(a&&u[2]?u[1]!==t[u[0]]:!(u[0]in t))return!1}for(;++o<s;){var c=(u=n[o])[0],l=t[c],f=u[1];if(a&&u[2]){if(l===i&&!(c in t))return!1}else{var h=new Zn;if(r)var p=r(l,f,c,t,e,h);if(!(p===i?Tr(f,l,3,r,h):p))return!1}}return!0}function Pr(t){return!(!ea(t)||(e=t,It&&It in e))&&(Ys(t)?Ut:vt).test(Uo(t));var e}function Mr(t){return"function"==typeof t?t:null==t?iu:"object"==typeof t?qs(t)?Ur(t[0],t[1]):Br(t):pu(t)}function Ir(t){if(!Co(t))return gn(t);var e=[];for(var n in St(t))Pt.call(t,n)&&"constructor"!=n&&e.push(n);return e}function Fr(t,e){return t<e}function Nr(t,e){var n=-1,i=Js(t)?r(t.length):[];return fr(t,(function(t,r,o){i[++n]=e(t,r,o)})),i}function Br(t){var e=uo(t);return 1==e.length&&e[0][2]?So(e[0][0],e[0][1]):function(n){return n===t||jr(n,t,e)}}function Ur(t,e){return mo(t)&&ko(e)?So(Bo(t),e):function(n){var r=$a(n,t);return r===i&&r===e?Ea(n,t):Tr(e,r,3)}}function zr(t,e,n,r,o){t!==e&&yr(e,(function(s,a){if(o||(o=new Zn),ea(s))!function(t,e,n,r,o,s,a){var u=Eo(t,n),c=Eo(e,n),l=a.get(c);if(l)Xn(t,n,l);else{var f=s?s(u,c,n+"",t,e,a):i,h=f===i;if(h){var p=qs(c),d=!p&&Gs(c),v=!p&&!d&&la(c);f=c,p||d||v?qs(u)?f=u:Zs(u)?f=$i(u):d?(h=!1,f=wi(c,!0)):v?(h=!1,f=ki(c,!0)):f=[]:oa(c)||Hs(c)?(f=u,Hs(u)?f=_a(u):ea(u)&&!Ys(u)||(f=vo(c))):h=!1}h&&(a.set(c,f),o(f,c,r,s,a),a.delete(c)),Xn(t,n,f)}}(t,e,a,n,zr,r,o);else{var u=r?r(Eo(t,a),s,a+"",t,e,o):i;u===i&&(u=s),Xn(t,a,u)}}),Pa)}function Lr(t,e){var n=t.length;if(n)return yo(e+=e<0?n:0,n)?t[e]:i}function Wr(t,e,n){e=e.length?Ae(e,(function(t){return qs(t)?function(e){return Cr(e,1===t.length?t[0]:t)}:t})):[iu];var r=-1;e=Ae(e,De(so()));var i=Nr(t,(function(t,n,i){var o=Ae(e,(function(e){return e(t)}));return{criteria:o,index:++r,value:t}}));return function(t,e){var r=t.length;for(t.sort((function(t,e){return function(t,e,n){for(var r=-1,i=t.criteria,o=e.criteria,s=i.length,a=n.length;++r<s;){var u=Si(i[r],o[r]);if(u)return r>=a?u:u*("desc"==n[r]?-1:1)}return t.index-e.index}(t,e,n)}));r--;)t[r]=t[r].value;return t}(i)}function Dr(t,e,n){for(var r=-1,i=e.length,o={};++r<i;){var s=e[r],a=Cr(t,s);n(a,s)&&Qr(o,yi(s,t),a)}return o}function Hr(t,e,n,r){var i=r?Me:Pe,o=-1,s=e.length,a=t;for(t===e&&(e=$i(e)),n&&(a=Ae(t,De(n)));++o<s;)for(var u=0,c=e[o],l=n?n(c):c;(u=i(a,l,u,r))>-1;)a!==t&&re.call(a,u,1),re.call(t,u,1);return t}function qr(t,e){for(var n=t?e.length:0,r=n-1;n--;){var i=e[n];if(n==r||i!==o){var o=i;yo(i)?re.call(t,i,1):ci(t,i)}}return t}function Vr(t,e){return t+fn(wn()*(e-t+1))}function Jr(t,e){var n="";if(!t||e<1||e>f)return n;do{e%2&&(n+=t),(e=fn(e/2))&&(t+=t)}while(e);return n}function Zr(t,e){return To(Ao(t,e,iu),t+"")}function Gr(t){return Kn(La(t))}function Kr(t,e){var n=La(t);return Mo(n,sr(e,0,n.length))}function Qr(t,e,n,r){if(!ea(t))return t;for(var o=-1,s=(e=yi(e,t)).length,a=s-1,u=t;null!=u&&++o<s;){var c=Bo(e[o]),l=n;if("__proto__"===c||"constructor"===c||"prototype"===c)return t;if(o!=a){var f=u[c];(l=r?r(f,c,u):i)===i&&(l=ea(f)?f:yo(e[o+1])?[]:{})}tr(u,c,l),u=u[c]}return t}var Yr=On?function(t,e){return On.set(t,e),t}:iu,Xr=ce?function(t,e){return ce(t,"toString",{configurable:!0,enumerable:!1,value:eu(e),writable:!0})}:iu;function ti(t){return Mo(La(t))}function ei(t,e,n){var i=-1,o=t.length;e<0&&(e=-e>o?0:o+e),(n=n>o?o:n)<0&&(n+=o),o=e>n?0:n-e>>>0,e>>>=0;for(var s=r(o);++i<o;)s[i]=t[i+e];return s}function ni(t,e){var n;return fr(t,(function(t,r,i){return!(n=e(t,r,i))})),!!n}function ri(t,e,n){var r=0,i=null==t?r:t.length;if("number"==typeof e&&e==e&&i<=2147483647){for(;r<i;){var o=r+i>>>1,s=t[o];null!==s&&!ca(s)&&(n?s<=e:s<e)?r=o+1:i=o}return i}return ii(t,e,iu,n)}function ii(t,e,n,r){var o=0,s=null==t?0:t.length;if(0===s)return 0;for(var a=(e=n(e))!=e,u=null===e,c=ca(e),l=e===i;o<s;){var f=fn((o+s)/2),h=n(t[f]),p=h!==i,d=null===h,v=h==h,g=ca(h);if(a)var y=r||v;else y=l?v&&(r||p):u?v&&p&&(r||!d):c?v&&p&&!d&&(r||!g):!d&&!g&&(r?h<=e:h<e);y?o=f+1:s=f}return _n(s,4294967294)}function oi(t,e){for(var n=-1,r=t.length,i=0,o=[];++n<r;){var s=t[n],a=e?e(s):s;if(!n||!Ls(a,u)){var u=a;o[i++]=0===s?0:s}}return o}function si(t){return"number"==typeof t?t:ca(t)?h:+t}function ai(t){if("string"==typeof t)return t;if(qs(t))return Ae(t,ai)+"";if(ca(t))return Bn?Bn.call(t):"";var e=t+"";return"0"==e&&1/t==-1/0?"-0":e}function ui(t,e,n){var r=-1,i=ke,o=t.length,s=!0,a=[],u=a;if(n)s=!1,i=Se;else if(o>=200){var c=e?null:Ji(t);if(c)return nn(c);s=!1,i=qe,u=new Jn}else u=e?[]:a;t:for(;++r<o;){var l=t[r],f=e?e(l):l;if(l=n||0!==l?l:0,s&&f==f){for(var h=u.length;h--;)if(u[h]===f)continue t;e&&u.push(f),a.push(l)}else i(u,f,n)||(u!==a&&u.push(f),a.push(l))}return a}function ci(t,e){return null==(t=xo(t,e=yi(e,t)))||delete t[Bo(Qo(e))]}function li(t,e,n,r){return Qr(t,e,n(Cr(t,e)),r)}function fi(t,e,n,r){for(var i=t.length,o=r?i:-1;(r?o--:++o<i)&&e(t[o],o,t););return n?ei(t,r?0:o,r?o+1:i):ei(t,r?o+1:0,r?i:o)}function hi(t,e){var n=t;return n instanceof Dn&&(n=n.value()),$e(e,(function(t,e){return e.func.apply(e.thisArg,xe([t],e.args))}),n)}function pi(t,e,n){var i=t.length;if(i<2)return i?ui(t[0]):[];for(var o=-1,s=r(i);++o<i;)for(var a=t[o],u=-1;++u<i;)u!=o&&(s[o]=lr(s[o]||a,t[u],e,n));return ui(gr(s,1),e,n)}function di(t,e,n){for(var r=-1,o=t.length,s=e.length,a={};++r<o;){var u=r<s?e[r]:i;n(a,t[r],u)}return a}function vi(t){return Zs(t)?t:[]}function gi(t){return"function"==typeof t?t:iu}function yi(t,e){return qs(t)?t:mo(t,e)?[t]:No(ma(t))}var _i=Zr;function mi(t,e,n){var r=t.length;return n=n===i?r:n,!e&&n>=r?t:ei(t,e,n)}var bi=le||function(t){return oe.clearTimeout(t)};function wi(t,e){if(e)return t.slice();var n=t.length,r=Dt?Dt(n):new t.constructor(n);return t.copy(r),r}function Ci(t){var e=new t.constructor(t.byteLength);return new Wt(e).set(new Wt(t)),e}function ki(t,e){var n=e?Ci(t.buffer):t.buffer;return new t.constructor(n,t.byteOffset,t.length)}function Si(t,e){if(t!==e){var n=t!==i,r=null===t,o=t==t,s=ca(t),a=e!==i,u=null===e,c=e==e,l=ca(e);if(!u&&!l&&!s&&t>e||s&&a&&c&&!u&&!l||r&&a&&c||!n&&c||!o)return 1;if(!r&&!s&&!l&&t<e||l&&n&&o&&!r&&!s||u&&n&&o||!a&&o||!c)return-1}return 0}function Ai(t,e,n,i){for(var o=-1,s=t.length,a=n.length,u=-1,c=e.length,l=yn(s-a,0),f=r(c+l),h=!i;++u<c;)f[u]=e[u];for(;++o<a;)(h||o<s)&&(f[n[o]]=t[o]);for(;l--;)f[u++]=t[o++];return f}function xi(t,e,n,i){for(var o=-1,s=t.length,a=-1,u=n.length,c=-1,l=e.length,f=yn(s-u,0),h=r(f+l),p=!i;++o<f;)h[o]=t[o];for(var d=o;++c<l;)h[d+c]=e[c];for(;++a<u;)(p||o<s)&&(h[d+n[a]]=t[o++]);return h}function $i(t,e){var n=-1,i=t.length;for(e||(e=r(i));++n<i;)e[n]=t[n];return e}function Ei(t,e,n,r){var o=!n;n||(n={});for(var s=-1,a=e.length;++s<a;){var u=e[s],c=r?r(n[u],t[u],u,n,t):i;c===i&&(c=t[u]),o?ir(n,u,c):tr(n,u,c)}return n}function Oi(t,e){return function(n,r){var i=qs(n)?_e:nr,o=e?e():{};return i(n,t,so(r,2),o)}}function Ri(t){return Zr((function(e,n){var r=-1,o=n.length,s=o>1?n[o-1]:i,a=o>2?n[2]:i;for(s=t.length>3&&"function"==typeof s?(o--,s):i,a&&_o(n[0],n[1],a)&&(s=o<3?i:s,o=1),e=St(e);++r<o;){var u=n[r];u&&t(e,u,r,s)}return e}))}function Ti(t,e){return function(n,r){if(null==n)return n;if(!Js(n))return t(n,r);for(var i=n.length,o=e?i:-1,s=St(n);(e?o--:++o<i)&&!1!==r(s[o],o,s););return n}}function ji(t){return function(e,n,r){for(var i=-1,o=St(e),s=r(e),a=s.length;a--;){var u=s[t?a:++i];if(!1===n(o[u],u,o))break}return e}}function Pi(t){return function(e){var n=Ye(e=ma(e))?sn(e):i,r=n?n[0]:e.charAt(0),o=n?mi(n,1).join(""):e.slice(1);return r[t]()+o}}function Mi(t){return function(e){return $e(Ya(Ha(e).replace(Ht,"")),t,"")}}function Ii(t){return function(){var e=arguments;switch(e.length){case 0:return new t;case 1:return new t(e[0]);case 2:return new t(e[0],e[1]);case 3:return new t(e[0],e[1],e[2]);case 4:return new t(e[0],e[1],e[2],e[3]);case 5:return new t(e[0],e[1],e[2],e[3],e[4]);case 6:return new t(e[0],e[1],e[2],e[3],e[4],e[5]);case 7:return new t(e[0],e[1],e[2],e[3],e[4],e[5],e[6])}var n=zn(t.prototype),r=t.apply(n,e);return ea(r)?r:n}}function Fi(t){return function(e,n,r){var o=St(e);if(!Js(e)){var s=so(n,3);e=ja(e),n=function(t){return s(o[t],t,o)}}var a=t(e,n,r);return a>-1?o[s?e[a]:a]:i}}function Ni(t){return to((function(e){var n=e.length,r=n,s=Wn.prototype.thru;for(t&&e.reverse();r--;){var a=e[r];if("function"!=typeof a)throw new $t(o);if(s&&!u&&"wrapper"==io(a))var u=new Wn([],!0)}for(r=u?r:n;++r<n;){var c=io(a=e[r]),l="wrapper"==c?ro(a):i;u=l&&bo(l[0])&&424==l[1]&&!l[4].length&&1==l[9]?u[io(l[0])].apply(u,l[3]):1==a.length&&bo(a)?u[c]():u.thru(a)}return function(){var t=arguments,r=t[0];if(u&&1==t.length&&qs(r))return u.plant(r).value();for(var i=0,o=n?e[i].apply(this,t):r;++i<n;)o=e[i].call(this,o);return o}}))}function Bi(t,e,n,o,s,a,u,l,f,h){var p=e&c,d=1&e,v=2&e,g=24&e,y=512&e,_=v?i:Ii(t);return function i(){for(var c=arguments.length,m=r(c),b=c;b--;)m[b]=arguments[b];if(g)var w=oo(i),C=Ze(m,w);if(o&&(m=Ai(m,o,s,g)),a&&(m=xi(m,a,u,g)),c-=C,g&&c<h){var k=en(m,w);return qi(t,e,Bi,i.placeholder,n,m,k,l,f,h-c)}var S=d?n:this,A=v?S[t]:t;return c=m.length,l?m=$o(m,l):y&&c>1&&m.reverse(),p&&f<c&&(m.length=f),this&&this!==oe&&this instanceof i&&(A=_||Ii(A)),A.apply(S,m)}}function Ui(t,e){return function(n,r){return function(t,e,n,r){return mr(t,(function(t,i,o){e(r,n(t),i,o)})),r}(n,t,e(r),{})}}function zi(t,e){return function(n,r){var o;if(n===i&&r===i)return e;if(n!==i&&(o=n),r!==i){if(o===i)return r;"string"==typeof n||"string"==typeof r?(n=ai(n),r=ai(r)):(n=si(n),r=si(r)),o=t(n,r)}return o}}function Li(t){return to((function(e){return e=Ae(e,De(so())),Zr((function(n){var r=this;return t(e,(function(t){return ye(t,r,n)}))}))}))}function Wi(t,e){var n=(e=e===i?" ":ai(e)).length;if(n<2)return n?Jr(e,t):e;var r=Jr(e,ln(t/on(e)));return Ye(e)?mi(sn(r),0,t).join(""):r.slice(0,t)}function Di(t){return function(e,n,o){return o&&"number"!=typeof o&&_o(e,n,o)&&(n=o=i),e=da(e),n===i?(n=e,e=0):n=da(n),function(t,e,n,i){for(var o=-1,s=yn(ln((e-t)/(n||1)),0),a=r(s);s--;)a[i?s:++o]=t,t+=n;return a}(e,n,o=o===i?e<n?1:-1:da(o),t)}}function Hi(t){return function(e,n){return"string"==typeof e&&"string"==typeof n||(e=ya(e),n=ya(n)),t(e,n)}}function qi(t,e,n,r,o,s,a,c,l,f){var h=8&e;e|=h?u:64,4&(e&=~(h?64:u))||(e&=-4);var p=[t,e,o,h?s:i,h?a:i,h?i:s,h?i:a,c,l,f],d=n.apply(i,p);return bo(t)&&Oo(d,p),d.placeholder=r,jo(d,t,e)}function Vi(t){var e=kt[t];return function(t,n){if(t=ya(t),(n=null==n?0:_n(va(n),292))&&dn(t)){var r=(ma(t)+"e").split("e");return+((r=(ma(e(r[0]+"e"+(+r[1]+n)))+"e").split("e"))[0]+"e"+(+r[1]-n))}return e(t)}}var Ji=xn&&1/nn(new xn([,-0]))[1]==l?function(t){return new xn(t)}:cu;function Zi(t){return function(e){var n=ho(e);return n==C?Xe(e):n==$?rn(e):function(t,e){return Ae(e,(function(e){return[e,t[e]]}))}(e,t(e))}}function Gi(t,e,n,s,l,f,h,p){var d=2&e;if(!d&&"function"!=typeof t)throw new $t(o);var v=s?s.length:0;if(v||(e&=-97,s=l=i),h=h===i?h:yn(va(h),0),p=p===i?p:va(p),v-=l?l.length:0,64&e){var g=s,y=l;s=l=i}var _=d?i:ro(t),m=[t,e,n,s,l,g,y,f,h,p];if(_&&function(t,e){var n=t[1],r=e[1],i=n|r,o=i<131,s=r==c&&8==n||r==c&&256==n&&t[7].length<=e[8]||384==r&&e[7].length<=e[8]&&8==n;if(!o&&!s)return t;1&r&&(t[2]=e[2],i|=1&n?0:4);var u=e[3];if(u){var l=t[3];t[3]=l?Ai(l,u,e[4]):u,t[4]=l?en(t[3],a):e[4]}(u=e[5])&&(l=t[5],t[5]=l?xi(l,u,e[6]):u,t[6]=l?en(t[5],a):e[6]),(u=e[7])&&(t[7]=u),r&c&&(t[8]=null==t[8]?e[8]:_n(t[8],e[8])),null==t[9]&&(t[9]=e[9]),t[0]=e[0],t[1]=i}(m,_),t=m[0],e=m[1],n=m[2],s=m[3],l=m[4],!(p=m[9]=m[9]===i?d?0:t.length:yn(m[9]-v,0))&&24&e&&(e&=-25),e&&1!=e)b=8==e||16==e?function(t,e,n){var o=Ii(t);return function s(){for(var a=arguments.length,u=r(a),c=a,l=oo(s);c--;)u[c]=arguments[c];var f=a<3&&u[0]!==l&&u[a-1]!==l?[]:en(u,l);return(a-=f.length)<n?qi(t,e,Bi,s.placeholder,i,u,f,i,i,n-a):ye(this&&this!==oe&&this instanceof s?o:t,this,u)}}(t,e,p):e!=u&&33!=e||l.length?Bi.apply(i,m):function(t,e,n,i){var o=1&e,s=Ii(t);return function e(){for(var a=-1,u=arguments.length,c=-1,l=i.length,f=r(l+u),h=this&&this!==oe&&this instanceof e?s:t;++c<l;)f[c]=i[c];for(;u--;)f[c++]=arguments[++a];return ye(h,o?n:this,f)}}(t,e,n,s);else var b=function(t,e,n){var r=1&e,i=Ii(t);return function e(){return(this&&this!==oe&&this instanceof e?i:t).apply(r?n:this,arguments)}}(t,e,n);return jo((_?Yr:Oo)(b,m),t,e)}function Ki(t,e,n,r){return t===i||Ls(t,Rt[n])&&!Pt.call(r,n)?e:t}function Qi(t,e,n,r,o,s){return ea(t)&&ea(e)&&(s.set(e,t),zr(t,e,i,Qi,s),s.delete(e)),t}function Yi(t){return oa(t)?i:t}function Xi(t,e,n,r,o,s){var a=1&n,u=t.length,c=e.length;if(u!=c&&!(a&&c>u))return!1;var l=s.get(t),f=s.get(e);if(l&&f)return l==e&&f==t;var h=-1,p=!0,d=2&n?new Jn:i;for(s.set(t,e),s.set(e,t);++h<u;){var v=t[h],g=e[h];if(r)var y=a?r(g,v,h,e,t,s):r(v,g,h,t,e,s);if(y!==i){if(y)continue;p=!1;break}if(d){if(!Oe(e,(function(t,e){if(!qe(d,e)&&(v===t||o(v,t,n,r,s)))return d.push(e)}))){p=!1;break}}else if(v!==g&&!o(v,g,n,r,s)){p=!1;break}}return s.delete(t),s.delete(e),p}function to(t){return To(Ao(t,i,Vo),t+"")}function eo(t){return kr(t,ja,lo)}function no(t){return kr(t,Pa,fo)}var ro=On?function(t){return On.get(t)}:cu;function io(t){for(var e=t.name+"",n=Rn[e],r=Pt.call(Rn,e)?n.length:0;r--;){var i=n[r],o=i.func;if(null==o||o==t)return i.name}return e}function oo(t){return(Pt.call(Un,"placeholder")?Un:t).placeholder}function so(){var t=Un.iteratee||ou;return t=t===ou?Mr:t,arguments.length?t(arguments[0],arguments[1]):t}function ao(t,e){var n,r,i=t.__data__;return("string"==(r=typeof(n=e))||"number"==r||"symbol"==r||"boolean"==r?"__proto__"!==n:null===n)?i["string"==typeof e?"string":"hash"]:i.map}function uo(t){for(var e=ja(t),n=e.length;n--;){var r=e[n],i=t[r];e[n]=[r,i,ko(i)]}return e}function co(t,e){var n=function(t,e){return null==t?i:t[e]}(t,e);return Pr(n)?n:i}var lo=hn?function(t){return null==t?[]:(t=St(t),Ce(hn(t),(function(e){return te.call(t,e)})))}:gu,fo=hn?function(t){for(var e=[];t;)xe(e,lo(t)),t=Vt(t);return e}:gu,ho=Sr;function po(t,e,n){for(var r=-1,i=(e=yi(e,t)).length,o=!1;++r<i;){var s=Bo(e[r]);if(!(o=null!=t&&n(t,s)))break;t=t[s]}return o||++r!=i?o:!!(i=null==t?0:t.length)&&ta(i)&&yo(s,i)&&(qs(t)||Hs(t))}function vo(t){return"function"!=typeof t.constructor||Co(t)?{}:zn(Vt(t))}function go(t){return qs(t)||Hs(t)||!!(ie&&t&&t[ie])}function yo(t,e){var n=typeof t;return!!(e=null==e?f:e)&&("number"==n||"symbol"!=n&&yt.test(t))&&t>-1&&t%1==0&&t<e}function _o(t,e,n){if(!ea(n))return!1;var r=typeof e;return!!("number"==r?Js(n)&&yo(e,n.length):"string"==r&&e in n)&&Ls(n[e],t)}function mo(t,e){if(qs(t))return!1;var n=typeof t;return!("number"!=n&&"symbol"!=n&&"boolean"!=n&&null!=t&&!ca(t))||X.test(t)||!Y.test(t)||null!=e&&t in St(e)}function bo(t){var e=io(t),n=Un[e];if("function"!=typeof n||!(e in Dn.prototype))return!1;if(t===n)return!0;var r=ro(n);return!!r&&t===r[0]}(kn&&ho(new kn(new ArrayBuffer(1)))!=j||Sn&&ho(new Sn)!=C||An&&ho(An.resolve())!=A||xn&&ho(new xn)!=$||$n&&ho(new $n)!=R)&&(ho=function(t){var e=Sr(t),n=e==S?t.constructor:i,r=n?Uo(n):"";if(r)switch(r){case Tn:return j;case jn:return C;case Pn:return A;case Mn:return $;case In:return R}return e});var wo=Tt?Ys:yu;function Co(t){var e=t&&t.constructor;return t===("function"==typeof e&&e.prototype||Rt)}function ko(t){return t==t&&!ea(t)}function So(t,e){return function(n){return null!=n&&n[t]===e&&(e!==i||t in St(n))}}function Ao(t,e,n){return e=yn(e===i?t.length-1:e,0),function(){for(var i=arguments,o=-1,s=yn(i.length-e,0),a=r(s);++o<s;)a[o]=i[e+o];o=-1;for(var u=r(e+1);++o<e;)u[o]=i[o];return u[e]=n(a),ye(t,this,u)}}function xo(t,e){return e.length<2?t:Cr(t,ei(e,0,-1))}function $o(t,e){for(var n=t.length,r=_n(e.length,n),o=$i(t);r--;){var s=e[r];t[r]=yo(s,n)?o[s]:i}return t}function Eo(t,e){if(("constructor"!==e||"function"!=typeof t[e])&&"__proto__"!=e)return t[e]}var Oo=Po(Yr),Ro=Be||function(t,e){return oe.setTimeout(t,e)},To=Po(Xr);function jo(t,e,n){var r=e+"";return To(t,function(t,e){var n=e.length;if(!n)return t;var r=n-1;return e[r]=(n>1?"& ":"")+e[r],e=e.join(n>2?", ":" "),t.replace(ot,"{\n/* [wrapped with "+e+"] */\n")}(r,function(t,e){return me(d,(function(n){var r="_."+n[0];e&n[1]&&!ke(t,r)&&t.push(r)})),t.sort()}(function(t){var e=t.match(st);return e?e[1].split(at):[]}(r),n)))}function Po(t){var e=0,n=0;return function(){var r=mn(),o=16-(r-n);if(n=r,o>0){if(++e>=800)return arguments[0]}else e=0;return t.apply(i,arguments)}}function Mo(t,e){var n=-1,r=t.length,o=r-1;for(e=e===i?r:e;++n<e;){var s=Vr(n,o),a=t[s];t[s]=t[n],t[n]=a}return t.length=e,t}var Io,Fo,No=(Io=Is((function(t){var e=[];return 46===t.charCodeAt(0)&&e.push(""),t.replace(tt,(function(t,n,r,i){e.push(r?i.replace(lt,"$1"):n||t)})),e}),(function(t){return 500===Fo.size&&Fo.clear(),t})),Fo=Io.cache,Io);function Bo(t){if("string"==typeof t||ca(t))return t;var e=t+"";return"0"==e&&1/t==-1/0?"-0":e}function Uo(t){if(null!=t){try{return jt.call(t)}catch(t){}try{return t+""}catch(t){}}return""}function zo(t){if(t instanceof Dn)return t.clone();var e=new Wn(t.__wrapped__,t.__chain__);return e.__actions__=$i(t.__actions__),e.__index__=t.__index__,e.__values__=t.__values__,e}var Lo=Zr((function(t,e){return Zs(t)?lr(t,gr(e,1,Zs,!0)):[]})),Wo=Zr((function(t,e){var n=Qo(e);return Zs(n)&&(n=i),Zs(t)?lr(t,gr(e,1,Zs,!0),so(n,2)):[]})),Do=Zr((function(t,e){var n=Qo(e);return Zs(n)&&(n=i),Zs(t)?lr(t,gr(e,1,Zs,!0),i,n):[]}));function Ho(t,e,n){var r=null==t?0:t.length;if(!r)return-1;var i=null==n?0:va(n);return i<0&&(i=yn(r+i,0)),je(t,so(e,3),i)}function qo(t,e,n){var r=null==t?0:t.length;if(!r)return-1;var o=r-1;return n!==i&&(o=va(n),o=n<0?yn(r+o,0):_n(o,r-1)),je(t,so(e,3),o,!0)}function Vo(t){return null!=t&&t.length?gr(t,1):[]}function Jo(t){return t&&t.length?t[0]:i}var Zo=Zr((function(t){var e=Ae(t,vi);return e.length&&e[0]===t[0]?Er(e):[]})),Go=Zr((function(t){var e=Qo(t),n=Ae(t,vi);return e===Qo(n)?e=i:n.pop(),n.length&&n[0]===t[0]?Er(n,so(e,2)):[]})),Ko=Zr((function(t){var e=Qo(t),n=Ae(t,vi);return(e="function"==typeof e?e:i)&&n.pop(),n.length&&n[0]===t[0]?Er(n,i,e):[]}));function Qo(t){var e=null==t?0:t.length;return e?t[e-1]:i}var Yo=Zr(Xo);function Xo(t,e){return t&&t.length&&e&&e.length?Hr(t,e):t}var ts=to((function(t,e){var n=null==t?0:t.length,r=or(t,e);return qr(t,Ae(e,(function(t){return yo(t,n)?+t:t})).sort(Si)),r}));function es(t){return null==t?t:Cn.call(t)}var ns=Zr((function(t){return ui(gr(t,1,Zs,!0))})),rs=Zr((function(t){var e=Qo(t);return Zs(e)&&(e=i),ui(gr(t,1,Zs,!0),so(e,2))})),is=Zr((function(t){var e=Qo(t);return e="function"==typeof e?e:i,ui(gr(t,1,Zs,!0),i,e)}));function os(t){if(!t||!t.length)return[];var e=0;return t=Ce(t,(function(t){if(Zs(t))return e=yn(t.length,e),!0})),Le(e,(function(e){return Ae(t,Ne(e))}))}function ss(t,e){if(!t||!t.length)return[];var n=os(t);return null==e?n:Ae(n,(function(t){return ye(e,i,t)}))}var as=Zr((function(t,e){return Zs(t)?lr(t,e):[]})),us=Zr((function(t){return pi(Ce(t,Zs))})),cs=Zr((function(t){var e=Qo(t);return Zs(e)&&(e=i),pi(Ce(t,Zs),so(e,2))})),ls=Zr((function(t){var e=Qo(t);return e="function"==typeof e?e:i,pi(Ce(t,Zs),i,e)})),fs=Zr(os),hs=Zr((function(t){var e=t.length,n=e>1?t[e-1]:i;return n="function"==typeof n?(t.pop(),n):i,ss(t,n)}));function ps(t){var e=Un(t);return e.__chain__=!0,e}function ds(t,e){return e(t)}var vs=to((function(t){var e=t.length,n=e?t[0]:0,r=this.__wrapped__,o=function(e){return or(e,t)};return!(e>1||this.__actions__.length)&&r instanceof Dn&&yo(n)?((r=r.slice(n,+n+(e?1:0))).__actions__.push({func:ds,args:[o],thisArg:i}),new Wn(r,this.__chain__).thru((function(t){return e&&!t.length&&t.push(i),t}))):this.thru(o)})),gs=Oi((function(t,e,n){Pt.call(t,n)?++t[n]:ir(t,n,1)})),ys=Fi(Ho),_s=Fi(qo);function ms(t,e){return(qs(t)?me:fr)(t,so(e,3))}function bs(t,e){return(qs(t)?be:hr)(t,so(e,3))}var ws=Oi((function(t,e,n){Pt.call(t,n)?t[n].push(e):ir(t,n,[e])})),Cs=Zr((function(t,e,n){var i=-1,o="function"==typeof e,s=Js(t)?r(t.length):[];return fr(t,(function(t){s[++i]=o?ye(e,t,n):Or(t,e,n)})),s})),ks=Oi((function(t,e,n){ir(t,n,e)}));function Ss(t,e){return(qs(t)?Ae:Nr)(t,so(e,3))}var As=Oi((function(t,e,n){t[n?0:1].push(e)}),(function(){return[[],[]]})),xs=Zr((function(t,e){if(null==t)return[];var n=e.length;return n>1&&_o(t,e[0],e[1])?e=[]:n>2&&_o(e[0],e[1],e[2])&&(e=[e[0]]),Wr(t,gr(e,1),[])})),$s=Re||function(){return oe.Date.now()};function Es(t,e,n){return e=n?i:e,e=t&&null==e?t.length:e,Gi(t,c,i,i,i,i,e)}function Os(t,e){var n;if("function"!=typeof e)throw new $t(o);return t=va(t),function(){return--t>0&&(n=e.apply(this,arguments)),t<=1&&(e=i),n}}var Rs=Zr((function(t,e,n){var r=1;if(n.length){var i=en(n,oo(Rs));r|=u}return Gi(t,r,e,n,i)})),Ts=Zr((function(t,e,n){var r=3;if(n.length){var i=en(n,oo(Ts));r|=u}return Gi(e,r,t,n,i)}));function js(t,e,n){var r,s,a,u,c,l,f=0,h=!1,p=!1,d=!0;if("function"!=typeof t)throw new $t(o);function v(e){var n=r,o=s;return r=s=i,f=e,u=t.apply(o,n)}function g(t){return f=t,c=Ro(_,e),h?v(t):u}function y(t){var n=t-l;return l===i||n>=e||n<0||p&&t-f>=a}function _(){var t=$s();if(y(t))return m(t);c=Ro(_,function(t){var n=e-(t-l);return p?_n(n,a-(t-f)):n}(t))}function m(t){return c=i,d&&r?v(t):(r=s=i,u)}function b(){var t=$s(),n=y(t);if(r=arguments,s=this,l=t,n){if(c===i)return g(l);if(p)return bi(c),c=Ro(_,e),v(l)}return c===i&&(c=Ro(_,e)),u}return e=ya(e)||0,ea(n)&&(h=!!n.leading,a=(p="maxWait"in n)?yn(ya(n.maxWait)||0,e):a,d="trailing"in n?!!n.trailing:d),b.cancel=function(){c!==i&&bi(c),f=0,r=l=s=c=i},b.flush=function(){return c===i?u:m($s())},b}var Ps=Zr((function(t,e){return cr(t,1,e)})),Ms=Zr((function(t,e,n){return cr(t,ya(e)||0,n)}));function Is(t,e){if("function"!=typeof t||null!=e&&"function"!=typeof e)throw new $t(o);var n=function(){var r=arguments,i=e?e.apply(this,r):r[0],o=n.cache;if(o.has(i))return o.get(i);var s=t.apply(this,r);return n.cache=o.set(i,s)||o,s};return n.cache=new(Is.Cache||Vn),n}function Fs(t){if("function"!=typeof t)throw new $t(o);return function(){var e=arguments;switch(e.length){case 0:return!t.call(this);case 1:return!t.call(this,e[0]);case 2:return!t.call(this,e[0],e[1]);case 3:return!t.call(this,e[0],e[1],e[2])}return!t.apply(this,e)}}Is.Cache=Vn;var Ns=_i((function(t,e){var n=(e=1==e.length&&qs(e[0])?Ae(e[0],De(so())):Ae(gr(e,1),De(so()))).length;return Zr((function(r){for(var i=-1,o=_n(r.length,n);++i<o;)r[i]=e[i].call(this,r[i]);return ye(t,this,r)}))})),Bs=Zr((function(t,e){var n=en(e,oo(Bs));return Gi(t,u,i,e,n)})),Us=Zr((function(t,e){var n=en(e,oo(Us));return Gi(t,64,i,e,n)})),zs=to((function(t,e){return Gi(t,256,i,i,i,e)}));function Ls(t,e){return t===e||t!=t&&e!=e}var Ws=Hi(Ar),Ds=Hi((function(t,e){return t>=e})),Hs=Rr(function(){return arguments}())?Rr:function(t){return na(t)&&Pt.call(t,"callee")&&!te.call(t,"callee")},qs=r.isArray,Vs=fe?De(fe):function(t){return na(t)&&Sr(t)==T};function Js(t){return null!=t&&ta(t.length)&&!Ys(t)}function Zs(t){return na(t)&&Js(t)}var Gs=pn||yu,Ks=he?De(he):function(t){return na(t)&&Sr(t)==_};function Qs(t){if(!na(t))return!1;var e=Sr(t);return e==m||"[object DOMException]"==e||"string"==typeof t.message&&"string"==typeof t.name&&!oa(t)}function Ys(t){if(!ea(t))return!1;var e=Sr(t);return e==b||e==w||"[object AsyncFunction]"==e||"[object Proxy]"==e}function Xs(t){return"number"==typeof t&&t==va(t)}function ta(t){return"number"==typeof t&&t>-1&&t%1==0&&t<=f}function ea(t){var e=typeof t;return null!=t&&("object"==e||"function"==e)}function na(t){return null!=t&&"object"==typeof t}var ra=pe?De(pe):function(t){return na(t)&&ho(t)==C};function ia(t){return"number"==typeof t||na(t)&&Sr(t)==k}function oa(t){if(!na(t)||Sr(t)!=S)return!1;var e=Vt(t);if(null===e)return!0;var n=Pt.call(e,"constructor")&&e.constructor;return"function"==typeof n&&n instanceof n&&jt.call(n)==Nt}var sa=de?De(de):function(t){return na(t)&&Sr(t)==x},aa=ve?De(ve):function(t){return na(t)&&ho(t)==$};function ua(t){return"string"==typeof t||!qs(t)&&na(t)&&Sr(t)==E}function ca(t){return"symbol"==typeof t||na(t)&&Sr(t)==O}var la=ge?De(ge):function(t){return na(t)&&ta(t.length)&&!!Yt[Sr(t)]},fa=Hi(Fr),ha=Hi((function(t,e){return t<=e}));function pa(t){if(!t)return[];if(Js(t))return ua(t)?sn(t):$i(t);if(se&&t[se])return function(t){for(var e,n=[];!(e=t.next()).done;)n.push(e.value);return n}(t[se]());var e=ho(t);return(e==C?Xe:e==$?nn:La)(t)}function da(t){return t?(t=ya(t))===l||t===-1/0?17976931348623157e292*(t<0?-1:1):t==t?t:0:0===t?t:0}function va(t){var e=da(t),n=e%1;return e==e?n?e-n:e:0}function ga(t){return t?sr(va(t),0,p):0}function ya(t){if("number"==typeof t)return t;if(ca(t))return h;if(ea(t)){var e="function"==typeof t.valueOf?t.valueOf():t;t=ea(e)?e+"":e}if("string"!=typeof t)return 0===t?t:+t;t=We(t);var n=dt.test(t);return n||gt.test(t)?ne(t.slice(2),n?2:8):pt.test(t)?h:+t}function _a(t){return Ei(t,Pa(t))}function ma(t){return null==t?"":ai(t)}var ba=Ri((function(t,e){if(Co(e)||Js(e))Ei(e,ja(e),t);else for(var n in e)Pt.call(e,n)&&tr(t,n,e[n])})),wa=Ri((function(t,e){Ei(e,Pa(e),t)})),Ca=Ri((function(t,e,n,r){Ei(e,Pa(e),t,r)})),ka=Ri((function(t,e,n,r){Ei(e,ja(e),t,r)})),Sa=to(or),Aa=Zr((function(t,e){t=St(t);var n=-1,r=e.length,o=r>2?e[2]:i;for(o&&_o(e[0],e[1],o)&&(r=1);++n<r;)for(var s=e[n],a=Pa(s),u=-1,c=a.length;++u<c;){var l=a[u],f=t[l];(f===i||Ls(f,Rt[l])&&!Pt.call(t,l))&&(t[l]=s[l])}return t})),xa=Zr((function(t){return t.push(i,Qi),ye(Ia,i,t)}));function $a(t,e,n){var r=null==t?i:Cr(t,e);return r===i?n:r}function Ea(t,e){return null!=t&&po(t,e,$r)}var Oa=Ui((function(t,e,n){null!=e&&"function"!=typeof e.toString&&(e=Ft.call(e)),t[e]=n}),eu(iu)),Ra=Ui((function(t,e,n){null!=e&&"function"!=typeof e.toString&&(e=Ft.call(e)),Pt.call(t,e)?t[e].push(n):t[e]=[n]}),so),Ta=Zr(Or);function ja(t){return Js(t)?Gn(t):Ir(t)}function Pa(t){return Js(t)?Gn(t,!0):function(t){if(!ea(t))return function(t){var e=[];if(null!=t)for(var n in St(t))e.push(n);return e}(t);var e=Co(t),n=[];for(var r in t)("constructor"!=r||!e&&Pt.call(t,r))&&n.push(r);return n}(t)}var Ma=Ri((function(t,e,n){zr(t,e,n)})),Ia=Ri((function(t,e,n,r){zr(t,e,n,r)})),Fa=to((function(t,e){var n={};if(null==t)return n;var r=!1;e=Ae(e,(function(e){return e=yi(e,t),r||(r=e.length>1),e})),Ei(t,no(t),n),r&&(n=ar(n,7,Yi));for(var i=e.length;i--;)ci(n,e[i]);return n})),Na=to((function(t,e){return null==t?{}:function(t,e){return Dr(t,e,(function(e,n){return Ea(t,n)}))}(t,e)}));function Ba(t,e){if(null==t)return{};var n=Ae(no(t),(function(t){return[t]}));return e=so(e),Dr(t,n,(function(t,n){return e(t,n[0])}))}var Ua=Zi(ja),za=Zi(Pa);function La(t){return null==t?[]:He(t,ja(t))}var Wa=Mi((function(t,e,n){return e=e.toLowerCase(),t+(n?Da(e):e)}));function Da(t){return Qa(ma(t).toLowerCase())}function Ha(t){return(t=ma(t))&&t.replace(_t,Ge).replace(qt,"")}var qa=Mi((function(t,e,n){return t+(n?"-":"")+e.toLowerCase()})),Va=Mi((function(t,e,n){return t+(n?" ":"")+e.toLowerCase()})),Ja=Pi("toLowerCase"),Za=Mi((function(t,e,n){return t+(n?"_":"")+e.toLowerCase()})),Ga=Mi((function(t,e,n){return t+(n?" ":"")+Qa(e)})),Ka=Mi((function(t,e,n){return t+(n?" ":"")+e.toUpperCase()})),Qa=Pi("toUpperCase");function Ya(t,e,n){return t=ma(t),(e=n?i:e)===i?function(t){return Gt.test(t)}(t)?function(t){return t.match(Jt)||[]}(t):function(t){return t.match(ut)||[]}(t):t.match(e)||[]}var Xa=Zr((function(t,e){try{return ye(t,i,e)}catch(t){return Qs(t)?t:new wt(t)}})),tu=to((function(t,e){return me(e,(function(e){e=Bo(e),ir(t,e,Rs(t[e],t))})),t}));function eu(t){return function(){return t}}var nu=Ni(),ru=Ni(!0);function iu(t){return t}function ou(t){return Mr("function"==typeof t?t:ar(t,1))}var su=Zr((function(t,e){return function(n){return Or(n,t,e)}})),au=Zr((function(t,e){return function(n){return Or(t,n,e)}}));function uu(t,e,n){var r=ja(e),i=wr(e,r);null!=n||ea(e)&&(i.length||!r.length)||(n=e,e=t,t=this,i=wr(e,ja(e)));var o=!(ea(n)&&"chain"in n&&!n.chain),s=Ys(t);return me(i,(function(n){var r=e[n];t[n]=r,s&&(t.prototype[n]=function(){var e=this.__chain__;if(o||e){var n=t(this.__wrapped__),i=n.__actions__=$i(this.__actions__);return i.push({func:r,args:arguments,thisArg:t}),n.__chain__=e,n}return r.apply(t,xe([this.value()],arguments))})})),t}function cu(){}var lu=Li(Ae),fu=Li(we),hu=Li(Oe);function pu(t){return mo(t)?Ne(Bo(t)):function(t){return function(e){return Cr(e,t)}}(t)}var du=Di(),vu=Di(!0);function gu(){return[]}function yu(){return!1}var _u,mu=zi((function(t,e){return t+e}),0),bu=Vi("ceil"),wu=zi((function(t,e){return t/e}),1),Cu=Vi("floor"),ku=zi((function(t,e){return t*e}),1),Su=Vi("round"),Au=zi((function(t,e){return t-e}),0);return Un.after=function(t,e){if("function"!=typeof e)throw new $t(o);return t=va(t),function(){if(--t<1)return e.apply(this,arguments)}},Un.ary=Es,Un.assign=ba,Un.assignIn=wa,Un.assignInWith=Ca,Un.assignWith=ka,Un.at=Sa,Un.before=Os,Un.bind=Rs,Un.bindAll=tu,Un.bindKey=Ts,Un.castArray=function(){if(!arguments.length)return[];var t=arguments[0];return qs(t)?t:[t]},Un.chain=ps,Un.chunk=function(t,e,n){e=(n?_o(t,e,n):e===i)?1:yn(va(e),0);var o=null==t?0:t.length;if(!o||e<1)return[];for(var s=0,a=0,u=r(ln(o/e));s<o;)u[a++]=ei(t,s,s+=e);return u},Un.compact=function(t){for(var e=-1,n=null==t?0:t.length,r=0,i=[];++e<n;){var o=t[e];o&&(i[r++]=o)}return i},Un.concat=function(){var t=arguments.length;if(!t)return[];for(var e=r(t-1),n=arguments[0],i=t;i--;)e[i-1]=arguments[i];return xe(qs(n)?$i(n):[n],gr(e,1))},Un.cond=function(t){var e=null==t?0:t.length,n=so();return t=e?Ae(t,(function(t){if("function"!=typeof t[1])throw new $t(o);return[n(t[0]),t[1]]})):[],Zr((function(n){for(var r=-1;++r<e;){var i=t[r];if(ye(i[0],this,n))return ye(i[1],this,n)}}))},Un.conforms=function(t){return function(t){var e=ja(t);return function(n){return ur(n,t,e)}}(ar(t,1))},Un.constant=eu,Un.countBy=gs,Un.create=function(t,e){var n=zn(t);return null==e?n:rr(n,e)},Un.curry=function t(e,n,r){var o=Gi(e,8,i,i,i,i,i,n=r?i:n);return o.placeholder=t.placeholder,o},Un.curryRight=function t(e,n,r){var o=Gi(e,16,i,i,i,i,i,n=r?i:n);return o.placeholder=t.placeholder,o},Un.debounce=js,Un.defaults=Aa,Un.defaultsDeep=xa,Un.defer=Ps,Un.delay=Ms,Un.difference=Lo,Un.differenceBy=Wo,Un.differenceWith=Do,Un.drop=function(t,e,n){var r=null==t?0:t.length;return r?ei(t,(e=n||e===i?1:va(e))<0?0:e,r):[]},Un.dropRight=function(t,e,n){var r=null==t?0:t.length;return r?ei(t,0,(e=r-(e=n||e===i?1:va(e)))<0?0:e):[]},Un.dropRightWhile=function(t,e){return t&&t.length?fi(t,so(e,3),!0,!0):[]},Un.dropWhile=function(t,e){return t&&t.length?fi(t,so(e,3),!0):[]},Un.fill=function(t,e,n,r){var o=null==t?0:t.length;return o?(n&&"number"!=typeof n&&_o(t,e,n)&&(n=0,r=o),function(t,e,n,r){var o=t.length;for((n=va(n))<0&&(n=-n>o?0:o+n),(r=r===i||r>o?o:va(r))<0&&(r+=o),r=n>r?0:ga(r);n<r;)t[n++]=e;return t}(t,e,n,r)):[]},Un.filter=function(t,e){return(qs(t)?Ce:vr)(t,so(e,3))},Un.flatMap=function(t,e){return gr(Ss(t,e),1)},Un.flatMapDeep=function(t,e){return gr(Ss(t,e),l)},Un.flatMapDepth=function(t,e,n){return n=n===i?1:va(n),gr(Ss(t,e),n)},Un.flatten=Vo,Un.flattenDeep=function(t){return null!=t&&t.length?gr(t,l):[]},Un.flattenDepth=function(t,e){return null!=t&&t.length?gr(t,e=e===i?1:va(e)):[]},Un.flip=function(t){return Gi(t,512)},Un.flow=nu,Un.flowRight=ru,Un.fromPairs=function(t){for(var e=-1,n=null==t?0:t.length,r={};++e<n;){var i=t[e];r[i[0]]=i[1]}return r},Un.functions=function(t){return null==t?[]:wr(t,ja(t))},Un.functionsIn=function(t){return null==t?[]:wr(t,Pa(t))},Un.groupBy=ws,Un.initial=function(t){return null!=t&&t.length?ei(t,0,-1):[]},Un.intersection=Zo,Un.intersectionBy=Go,Un.intersectionWith=Ko,Un.invert=Oa,Un.invertBy=Ra,Un.invokeMap=Cs,Un.iteratee=ou,Un.keyBy=ks,Un.keys=ja,Un.keysIn=Pa,Un.map=Ss,Un.mapKeys=function(t,e){var n={};return e=so(e,3),mr(t,(function(t,r,i){ir(n,e(t,r,i),t)})),n},Un.mapValues=function(t,e){var n={};return e=so(e,3),mr(t,(function(t,r,i){ir(n,r,e(t,r,i))})),n},Un.matches=function(t){return Br(ar(t,1))},Un.matchesProperty=function(t,e){return Ur(t,ar(e,1))},Un.memoize=Is,Un.merge=Ma,Un.mergeWith=Ia,Un.method=su,Un.methodOf=au,Un.mixin=uu,Un.negate=Fs,Un.nthArg=function(t){return t=va(t),Zr((function(e){return Lr(e,t)}))},Un.omit=Fa,Un.omitBy=function(t,e){return Ba(t,Fs(so(e)))},Un.once=function(t){return Os(2,t)},Un.orderBy=function(t,e,n,r){return null==t?[]:(qs(e)||(e=null==e?[]:[e]),qs(n=r?i:n)||(n=null==n?[]:[n]),Wr(t,e,n))},Un.over=lu,Un.overArgs=Ns,Un.overEvery=fu,Un.overSome=hu,Un.partial=Bs,Un.partialRight=Us,Un.partition=As,Un.pick=Na,Un.pickBy=Ba,Un.property=pu,Un.propertyOf=function(t){return function(e){return null==t?i:Cr(t,e)}},Un.pull=Yo,Un.pullAll=Xo,Un.pullAllBy=function(t,e,n){return t&&t.length&&e&&e.length?Hr(t,e,so(n,2)):t},Un.pullAllWith=function(t,e,n){return t&&t.length&&e&&e.length?Hr(t,e,i,n):t},Un.pullAt=ts,Un.range=du,Un.rangeRight=vu,Un.rearg=zs,Un.reject=function(t,e){return(qs(t)?Ce:vr)(t,Fs(so(e,3)))},Un.remove=function(t,e){var n=[];if(!t||!t.length)return n;var r=-1,i=[],o=t.length;for(e=so(e,3);++r<o;){var s=t[r];e(s,r,t)&&(n.push(s),i.push(r))}return qr(t,i),n},Un.rest=function(t,e){if("function"!=typeof t)throw new $t(o);return Zr(t,e=e===i?e:va(e))},Un.reverse=es,Un.sampleSize=function(t,e,n){return e=(n?_o(t,e,n):e===i)?1:va(e),(qs(t)?Qn:Kr)(t,e)},Un.set=function(t,e,n){return null==t?t:Qr(t,e,n)},Un.setWith=function(t,e,n,r){return r="function"==typeof r?r:i,null==t?t:Qr(t,e,n,r)},Un.shuffle=function(t){return(qs(t)?Yn:ti)(t)},Un.slice=function(t,e,n){var r=null==t?0:t.length;return r?(n&&"number"!=typeof n&&_o(t,e,n)?(e=0,n=r):(e=null==e?0:va(e),n=n===i?r:va(n)),ei(t,e,n)):[]},Un.sortBy=xs,Un.sortedUniq=function(t){return t&&t.length?oi(t):[]},Un.sortedUniqBy=function(t,e){return t&&t.length?oi(t,so(e,2)):[]},Un.split=function(t,e,n){return n&&"number"!=typeof n&&_o(t,e,n)&&(e=n=i),(n=n===i?p:n>>>0)?(t=ma(t))&&("string"==typeof e||null!=e&&!sa(e))&&!(e=ai(e))&&Ye(t)?mi(sn(t),0,n):t.split(e,n):[]},Un.spread=function(t,e){if("function"!=typeof t)throw new $t(o);return e=null==e?0:yn(va(e),0),Zr((function(n){var r=n[e],i=mi(n,0,e);return r&&xe(i,r),ye(t,this,i)}))},Un.tail=function(t){var e=null==t?0:t.length;return e?ei(t,1,e):[]},Un.take=function(t,e,n){return t&&t.length?ei(t,0,(e=n||e===i?1:va(e))<0?0:e):[]},Un.takeRight=function(t,e,n){var r=null==t?0:t.length;return r?ei(t,(e=r-(e=n||e===i?1:va(e)))<0?0:e,r):[]},Un.takeRightWhile=function(t,e){return t&&t.length?fi(t,so(e,3),!1,!0):[]},Un.takeWhile=function(t,e){return t&&t.length?fi(t,so(e,3)):[]},Un.tap=function(t,e){return e(t),t},Un.throttle=function(t,e,n){var r=!0,i=!0;if("function"!=typeof t)throw new $t(o);return ea(n)&&(r="leading"in n?!!n.leading:r,i="trailing"in n?!!n.trailing:i),js(t,e,{leading:r,maxWait:e,trailing:i})},Un.thru=ds,Un.toArray=pa,Un.toPairs=Ua,Un.toPairsIn=za,Un.toPath=function(t){return qs(t)?Ae(t,Bo):ca(t)?[t]:$i(No(ma(t)))},Un.toPlainObject=_a,Un.transform=function(t,e,n){var r=qs(t),i=r||Gs(t)||la(t);if(e=so(e,4),null==n){var o=t&&t.constructor;n=i?r?new o:[]:ea(t)&&Ys(o)?zn(Vt(t)):{}}return(i?me:mr)(t,(function(t,r,i){return e(n,t,r,i)})),n},Un.unary=function(t){return Es(t,1)},Un.union=ns,Un.unionBy=rs,Un.unionWith=is,Un.uniq=function(t){return t&&t.length?ui(t):[]},Un.uniqBy=function(t,e){return t&&t.length?ui(t,so(e,2)):[]},Un.uniqWith=function(t,e){return e="function"==typeof e?e:i,t&&t.length?ui(t,i,e):[]},Un.unset=function(t,e){return null==t||ci(t,e)},Un.unzip=os,Un.unzipWith=ss,Un.update=function(t,e,n){return null==t?t:li(t,e,gi(n))},Un.updateWith=function(t,e,n,r){return r="function"==typeof r?r:i,null==t?t:li(t,e,gi(n),r)},Un.values=La,Un.valuesIn=function(t){return null==t?[]:He(t,Pa(t))},Un.without=as,Un.words=Ya,Un.wrap=function(t,e){return Bs(gi(e),t)},Un.xor=us,Un.xorBy=cs,Un.xorWith=ls,Un.zip=fs,Un.zipObject=function(t,e){return di(t||[],e||[],tr)},Un.zipObjectDeep=function(t,e){return di(t||[],e||[],Qr)},Un.zipWith=hs,Un.entries=Ua,Un.entriesIn=za,Un.extend=wa,Un.extendWith=Ca,uu(Un,Un),Un.add=mu,Un.attempt=Xa,Un.camelCase=Wa,Un.capitalize=Da,Un.ceil=bu,Un.clamp=function(t,e,n){return n===i&&(n=e,e=i),n!==i&&(n=(n=ya(n))==n?n:0),e!==i&&(e=(e=ya(e))==e?e:0),sr(ya(t),e,n)},Un.clone=function(t){return ar(t,4)},Un.cloneDeep=function(t){return ar(t,5)},Un.cloneDeepWith=function(t,e){return ar(t,5,e="function"==typeof e?e:i)},Un.cloneWith=function(t,e){return ar(t,4,e="function"==typeof e?e:i)},Un.conformsTo=function(t,e){return null==e||ur(t,e,ja(e))},Un.deburr=Ha,Un.defaultTo=function(t,e){return null==t||t!=t?e:t},Un.divide=wu,Un.endsWith=function(t,e,n){t=ma(t),e=ai(e);var r=t.length,o=n=n===i?r:sr(va(n),0,r);return(n-=e.length)>=0&&t.slice(n,o)==e},Un.eq=Ls,Un.escape=function(t){return(t=ma(t))&&Z.test(t)?t.replace(V,Ke):t},Un.escapeRegExp=function(t){return(t=ma(t))&&nt.test(t)?t.replace(et,"\\$&"):t},Un.every=function(t,e,n){var r=qs(t)?we:pr;return n&&_o(t,e,n)&&(e=i),r(t,so(e,3))},Un.find=ys,Un.findIndex=Ho,Un.findKey=function(t,e){return Te(t,so(e,3),mr)},Un.findLast=_s,Un.findLastIndex=qo,Un.findLastKey=function(t,e){return Te(t,so(e,3),br)},Un.floor=Cu,Un.forEach=ms,Un.forEachRight=bs,Un.forIn=function(t,e){return null==t?t:yr(t,so(e,3),Pa)},Un.forInRight=function(t,e){return null==t?t:_r(t,so(e,3),Pa)},Un.forOwn=function(t,e){return t&&mr(t,so(e,3))},Un.forOwnRight=function(t,e){return t&&br(t,so(e,3))},Un.get=$a,Un.gt=Ws,Un.gte=Ds,Un.has=function(t,e){return null!=t&&po(t,e,xr)},Un.hasIn=Ea,Un.head=Jo,Un.identity=iu,Un.includes=function(t,e,n,r){t=Js(t)?t:La(t),n=n&&!r?va(n):0;var i=t.length;return n<0&&(n=yn(i+n,0)),ua(t)?n<=i&&t.indexOf(e,n)>-1:!!i&&Pe(t,e,n)>-1},Un.indexOf=function(t,e,n){var r=null==t?0:t.length;if(!r)return-1;var i=null==n?0:va(n);return i<0&&(i=yn(r+i,0)),Pe(t,e,i)},Un.inRange=function(t,e,n){return e=da(e),n===i?(n=e,e=0):n=da(n),function(t,e,n){return t>=_n(e,n)&&t<yn(e,n)}(t=ya(t),e,n)},Un.invoke=Ta,Un.isArguments=Hs,Un.isArray=qs,Un.isArrayBuffer=Vs,Un.isArrayLike=Js,Un.isArrayLikeObject=Zs,Un.isBoolean=function(t){return!0===t||!1===t||na(t)&&Sr(t)==y},Un.isBuffer=Gs,Un.isDate=Ks,Un.isElement=function(t){return na(t)&&1===t.nodeType&&!oa(t)},Un.isEmpty=function(t){if(null==t)return!0;if(Js(t)&&(qs(t)||"string"==typeof t||"function"==typeof t.splice||Gs(t)||la(t)||Hs(t)))return!t.length;var e=ho(t);if(e==C||e==$)return!t.size;if(Co(t))return!Ir(t).length;for(var n in t)if(Pt.call(t,n))return!1;return!0},Un.isEqual=function(t,e){return Tr(t,e)},Un.isEqualWith=function(t,e,n){var r=(n="function"==typeof n?n:i)?n(t,e):i;return r===i?Tr(t,e,i,n):!!r},Un.isError=Qs,Un.isFinite=function(t){return"number"==typeof t&&dn(t)},Un.isFunction=Ys,Un.isInteger=Xs,Un.isLength=ta,Un.isMap=ra,Un.isMatch=function(t,e){return t===e||jr(t,e,uo(e))},Un.isMatchWith=function(t,e,n){return n="function"==typeof n?n:i,jr(t,e,uo(e),n)},Un.isNaN=function(t){return ia(t)&&t!=+t},Un.isNative=function(t){if(wo(t))throw new wt("Unsupported core-js use. Try https://npms.io/search?q=ponyfill.");return Pr(t)},Un.isNil=function(t){return null==t},Un.isNull=function(t){return null===t},Un.isNumber=ia,Un.isObject=ea,Un.isObjectLike=na,Un.isPlainObject=oa,Un.isRegExp=sa,Un.isSafeInteger=function(t){return Xs(t)&&t>=-9007199254740991&&t<=f},Un.isSet=aa,Un.isString=ua,Un.isSymbol=ca,Un.isTypedArray=la,Un.isUndefined=function(t){return t===i},Un.isWeakMap=function(t){return na(t)&&ho(t)==R},Un.isWeakSet=function(t){return na(t)&&"[object WeakSet]"==Sr(t)},Un.join=function(t,e){return null==t?"":vn.call(t,e)},Un.kebabCase=qa,Un.last=Qo,Un.lastIndexOf=function(t,e,n){var r=null==t?0:t.length;if(!r)return-1;var o=r;return n!==i&&(o=(o=va(n))<0?yn(r+o,0):_n(o,r-1)),e==e?function(t,e,n){for(var r=n+1;r--;)if(t[r]===e)return r;return r}(t,e,o):je(t,Ie,o,!0)},Un.lowerCase=Va,Un.lowerFirst=Ja,Un.lt=fa,Un.lte=ha,Un.max=function(t){return t&&t.length?dr(t,iu,Ar):i},Un.maxBy=function(t,e){return t&&t.length?dr(t,so(e,2),Ar):i},Un.mean=function(t){return Fe(t,iu)},Un.meanBy=function(t,e){return Fe(t,so(e,2))},Un.min=function(t){return t&&t.length?dr(t,iu,Fr):i},Un.minBy=function(t,e){return t&&t.length?dr(t,so(e,2),Fr):i},Un.stubArray=gu,Un.stubFalse=yu,Un.stubObject=function(){return{}},Un.stubString=function(){return""},Un.stubTrue=function(){return!0},Un.multiply=ku,Un.nth=function(t,e){return t&&t.length?Lr(t,va(e)):i},Un.noConflict=function(){return oe._===this&&(oe._=Bt),this},Un.noop=cu,Un.now=$s,Un.pad=function(t,e,n){t=ma(t);var r=(e=va(e))?on(t):0;if(!e||r>=e)return t;var i=(e-r)/2;return Wi(fn(i),n)+t+Wi(ln(i),n)},Un.padEnd=function(t,e,n){t=ma(t);var r=(e=va(e))?on(t):0;return e&&r<e?t+Wi(e-r,n):t},Un.padStart=function(t,e,n){t=ma(t);var r=(e=va(e))?on(t):0;return e&&r<e?Wi(e-r,n)+t:t},Un.parseInt=function(t,e,n){return n||null==e?e=0:e&&(e=+e),bn(ma(t).replace(rt,""),e||0)},Un.random=function(t,e,n){if(n&&"boolean"!=typeof n&&_o(t,e,n)&&(e=n=i),n===i&&("boolean"==typeof e?(n=e,e=i):"boolean"==typeof t&&(n=t,t=i)),t===i&&e===i?(t=0,e=1):(t=da(t),e===i?(e=t,t=0):e=da(e)),t>e){var r=t;t=e,e=r}if(n||t%1||e%1){var o=wn();return _n(t+o*(e-t+ee("1e-"+((o+"").length-1))),e)}return Vr(t,e)},Un.reduce=function(t,e,n){var r=qs(t)?$e:Ue,i=arguments.length<3;return r(t,so(e,4),n,i,fr)},Un.reduceRight=function(t,e,n){var r=qs(t)?Ee:Ue,i=arguments.length<3;return r(t,so(e,4),n,i,hr)},Un.repeat=function(t,e,n){return e=(n?_o(t,e,n):e===i)?1:va(e),Jr(ma(t),e)},Un.replace=function(){var t=arguments,e=ma(t[0]);return t.length<3?e:e.replace(t[1],t[2])},Un.result=function(t,e,n){var r=-1,o=(e=yi(e,t)).length;for(o||(o=1,t=i);++r<o;){var s=null==t?i:t[Bo(e[r])];s===i&&(r=o,s=n),t=Ys(s)?s.call(t):s}return t},Un.round=Su,Un.runInContext=t,Un.sample=function(t){return(qs(t)?Kn:Gr)(t)},Un.size=function(t){if(null==t)return 0;if(Js(t))return ua(t)?on(t):t.length;var e=ho(t);return e==C||e==$?t.size:Ir(t).length},Un.snakeCase=Za,Un.some=function(t,e,n){var r=qs(t)?Oe:ni;return n&&_o(t,e,n)&&(e=i),r(t,so(e,3))},Un.sortedIndex=function(t,e){return ri(t,e)},Un.sortedIndexBy=function(t,e,n){return ii(t,e,so(n,2))},Un.sortedIndexOf=function(t,e){var n=null==t?0:t.length;if(n){var r=ri(t,e);if(r<n&&Ls(t[r],e))return r}return-1},Un.sortedLastIndex=function(t,e){return ri(t,e,!0)},Un.sortedLastIndexBy=function(t,e,n){return ii(t,e,so(n,2),!0)},Un.sortedLastIndexOf=function(t,e){if(null!=t&&t.length){var n=ri(t,e,!0)-1;if(Ls(t[n],e))return n}return-1},Un.startCase=Ga,Un.startsWith=function(t,e,n){return t=ma(t),n=null==n?0:sr(va(n),0,t.length),e=ai(e),t.slice(n,n+e.length)==e},Un.subtract=Au,Un.sum=function(t){return t&&t.length?ze(t,iu):0},Un.sumBy=function(t,e){return t&&t.length?ze(t,so(e,2)):0},Un.template=function(t,e,n){var r=Un.templateSettings;n&&_o(t,e,n)&&(e=i),t=ma(t),e=Ca({},e,r,Ki);var o,s,a=Ca({},e.imports,r.imports,Ki),u=ja(a),c=He(a,u),l=0,f=e.interpolate||mt,h="__p += '",p=At((e.escape||mt).source+"|"+f.source+"|"+(f===Q?ft:mt).source+"|"+(e.evaluate||mt).source+"|$","g"),d="//# sourceURL="+(Pt.call(e,"sourceURL")?(e.sourceURL+"").replace(/\s/g," "):"lodash.templateSources["+ ++Qt+"]")+"\n";t.replace(p,(function(e,n,r,i,a,u){return r||(r=i),h+=t.slice(l,u).replace(bt,Qe),n&&(o=!0,h+="' +\n__e("+n+") +\n'"),a&&(s=!0,h+="';\n"+a+";\n__p += '"),r&&(h+="' +\n((__t = ("+r+")) == null ? '' : __t) +\n'"),l=u+e.length,e})),h+="';\n";var v=Pt.call(e,"variable")&&e.variable;if(v){if(ct.test(v))throw new wt("Invalid `variable` option passed into `_.template`")}else h="with (obj) {\n"+h+"\n}\n";h=(s?h.replace(W,""):h).replace(D,"$1").replace(H,"$1;"),h="function("+(v||"obj")+") {\n"+(v?"":"obj || (obj = {});\n")+"var __t, __p = ''"+(o?", __e = _.escape":"")+(s?", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n":";\n")+h+"return __p\n}";var g=Xa((function(){return Ct(u,d+"return "+h).apply(i,c)}));if(g.source=h,Qs(g))throw g;return g},Un.times=function(t,e){if((t=va(t))<1||t>f)return[];var n=p,r=_n(t,p);e=so(e),t-=p;for(var i=Le(r,e);++n<t;)e(n);return i},Un.toFinite=da,Un.toInteger=va,Un.toLength=ga,Un.toLower=function(t){return ma(t).toLowerCase()},Un.toNumber=ya,Un.toSafeInteger=function(t){return t?sr(va(t),-9007199254740991,f):0===t?t:0},Un.toString=ma,Un.toUpper=function(t){return ma(t).toUpperCase()},Un.trim=function(t,e,n){if((t=ma(t))&&(n||e===i))return We(t);if(!t||!(e=ai(e)))return t;var r=sn(t),o=sn(e);return mi(r,Ve(r,o),Je(r,o)+1).join("")},Un.trimEnd=function(t,e,n){if((t=ma(t))&&(n||e===i))return t.slice(0,an(t)+1);if(!t||!(e=ai(e)))return t;var r=sn(t);return mi(r,0,Je(r,sn(e))+1).join("")},Un.trimStart=function(t,e,n){if((t=ma(t))&&(n||e===i))return t.replace(rt,"");if(!t||!(e=ai(e)))return t;var r=sn(t);return mi(r,Ve(r,sn(e))).join("")},Un.truncate=function(t,e){var n=30,r="...";if(ea(e)){var o="separator"in e?e.separator:o;n="length"in e?va(e.length):n,r="omission"in e?ai(e.omission):r}var s=(t=ma(t)).length;if(Ye(t)){var a=sn(t);s=a.length}if(n>=s)return t;var u=n-on(r);if(u<1)return r;var c=a?mi(a,0,u).join(""):t.slice(0,u);if(o===i)return c+r;if(a&&(u+=c.length-u),sa(o)){if(t.slice(u).search(o)){var l,f=c;for(o.global||(o=At(o.source,ma(ht.exec(o))+"g")),o.lastIndex=0;l=o.exec(f);)var h=l.index;c=c.slice(0,h===i?u:h)}}else if(t.indexOf(ai(o),u)!=u){var p=c.lastIndexOf(o);p>-1&&(c=c.slice(0,p))}return c+r},Un.unescape=function(t){return(t=ma(t))&&J.test(t)?t.replace(q,un):t},Un.uniqueId=function(t){var e=++Mt;return ma(t)+e},Un.upperCase=Ka,Un.upperFirst=Qa,Un.each=ms,Un.eachRight=bs,Un.first=Jo,uu(Un,(_u={},mr(Un,(function(t,e){Pt.call(Un.prototype,e)||(_u[e]=t)})),_u),{chain:!1}),Un.VERSION="4.17.21",me(["bind","bindKey","curry","curryRight","partial","partialRight"],(function(t){Un[t].placeholder=Un})),me(["drop","take"],(function(t,e){Dn.prototype[t]=function(n){n=n===i?1:yn(va(n),0);var r=this.__filtered__&&!e?new Dn(this):this.clone();return r.__filtered__?r.__takeCount__=_n(n,r.__takeCount__):r.__views__.push({size:_n(n,p),type:t+(r.__dir__<0?"Right":"")}),r},Dn.prototype[t+"Right"]=function(e){return this.reverse()[t](e).reverse()}})),me(["filter","map","takeWhile"],(function(t,e){var n=e+1,r=1==n||3==n;Dn.prototype[t]=function(t){var e=this.clone();return e.__iteratees__.push({iteratee:so(t,3),type:n}),e.__filtered__=e.__filtered__||r,e}})),me(["head","last"],(function(t,e){var n="take"+(e?"Right":"");Dn.prototype[t]=function(){return this[n](1).value()[0]}})),me(["initial","tail"],(function(t,e){var n="drop"+(e?"":"Right");Dn.prototype[t]=function(){return this.__filtered__?new Dn(this):this[n](1)}})),Dn.prototype.compact=function(){return this.filter(iu)},Dn.prototype.find=function(t){return this.filter(t).head()},Dn.prototype.findLast=function(t){return this.reverse().find(t)},Dn.prototype.invokeMap=Zr((function(t,e){return"function"==typeof t?new Dn(this):this.map((function(n){return Or(n,t,e)}))})),Dn.prototype.reject=function(t){return this.filter(Fs(so(t)))},Dn.prototype.slice=function(t,e){t=va(t);var n=this;return n.__filtered__&&(t>0||e<0)?new Dn(n):(t<0?n=n.takeRight(-t):t&&(n=n.drop(t)),e!==i&&(n=(e=va(e))<0?n.dropRight(-e):n.take(e-t)),n)},Dn.prototype.takeRightWhile=function(t){return this.reverse().takeWhile(t).reverse()},Dn.prototype.toArray=function(){return this.take(p)},mr(Dn.prototype,(function(t,e){var n=/^(?:filter|find|map|reject)|While$/.test(e),r=/^(?:head|last)$/.test(e),o=Un[r?"take"+("last"==e?"Right":""):e],s=r||/^find/.test(e);o&&(Un.prototype[e]=function(){var e=this.__wrapped__,a=r?[1]:arguments,u=e instanceof Dn,c=a[0],l=u||qs(e),f=function(t){var e=o.apply(Un,xe([t],a));return r&&h?e[0]:e};l&&n&&"function"==typeof c&&1!=c.length&&(u=l=!1);var h=this.__chain__,p=!!this.__actions__.length,d=s&&!h,v=u&&!p;if(!s&&l){e=v?e:new Dn(this);var g=t.apply(e,a);return g.__actions__.push({func:ds,args:[f],thisArg:i}),new Wn(g,h)}return d&&v?t.apply(this,a):(g=this.thru(f),d?r?g.value()[0]:g.value():g)})})),me(["pop","push","shift","sort","splice","unshift"],(function(t){var e=Et[t],n=/^(?:push|sort|unshift)$/.test(t)?"tap":"thru",r=/^(?:pop|shift)$/.test(t);Un.prototype[t]=function(){var t=arguments;if(r&&!this.__chain__){var i=this.value();return e.apply(qs(i)?i:[],t)}return this[n]((function(n){return e.apply(qs(n)?n:[],t)}))}})),mr(Dn.prototype,(function(t,e){var n=Un[e];if(n){var r=n.name+"";Pt.call(Rn,r)||(Rn[r]=[]),Rn[r].push({name:e,func:n})}})),Rn[Bi(i,2).name]=[{name:"wrapper",func:i}],Dn.prototype.clone=function(){var t=new Dn(this.__wrapped__);return t.__actions__=$i(this.__actions__),t.__dir__=this.__dir__,t.__filtered__=this.__filtered__,t.__iteratees__=$i(this.__iteratees__),t.__takeCount__=this.__takeCount__,t.__views__=$i(this.__views__),t},Dn.prototype.reverse=function(){if(this.__filtered__){var t=new Dn(this);t.__dir__=-1,t.__filtered__=!0}else(t=this.clone()).__dir__*=-1;return t},Dn.prototype.value=function(){var t=this.__wrapped__.value(),e=this.__dir__,n=qs(t),r=e<0,i=n?t.length:0,o=function(t,e,n){for(var r=-1,i=n.length;++r<i;){var o=n[r],s=o.size;switch(o.type){case"drop":t+=s;break;case"dropRight":e-=s;break;case"take":e=_n(e,t+s);break;case"takeRight":t=yn(t,e-s)}}return{start:t,end:e}}(0,i,this.__views__),s=o.start,a=o.end,u=a-s,c=r?a:s-1,l=this.__iteratees__,f=l.length,h=0,p=_n(u,this.__takeCount__);if(!n||!r&&i==u&&p==u)return hi(t,this.__actions__);var d=[];t:for(;u--&&h<p;){for(var v=-1,g=t[c+=e];++v<f;){var y=l[v],_=y.iteratee,m=y.type,b=_(g);if(2==m)g=b;else if(!b){if(1==m)continue t;break t}}d[h++]=g}return d},Un.prototype.at=vs,Un.prototype.chain=function(){return ps(this)},Un.prototype.commit=function(){return new Wn(this.value(),this.__chain__)},Un.prototype.next=function(){this.__values__===i&&(this.__values__=pa(this.value()));var t=this.__index__>=this.__values__.length;return{done:t,value:t?i:this.__values__[this.__index__++]}},Un.prototype.plant=function(t){for(var e,n=this;n instanceof Ln;){var r=zo(n);r.__index__=0,r.__values__=i,e?o.__wrapped__=r:e=r;var o=r;n=n.__wrapped__}return o.__wrapped__=t,e},Un.prototype.reverse=function(){var t=this.__wrapped__;if(t instanceof Dn){var e=t;return this.__actions__.length&&(e=new Dn(this)),(e=e.reverse()).__actions__.push({func:ds,args:[es],thisArg:i}),new Wn(e,this.__chain__)}return this.thru(es)},Un.prototype.toJSON=Un.prototype.valueOf=Un.prototype.value=function(){return hi(this.__wrapped__,this.__actions__)},Un.prototype.first=Un.prototype.head,se&&(Un.prototype[se]=function(){return this}),Un}();oe._=cn,(r=function(){return cn}.call(e,n,e,t))===i||(t.exports=r)}.call(this)},304:t=>{var e=1e3,n=60*e,r=60*n,i=24*r;function o(t,e,n,r){var i=e>=1.5*n;return Math.round(t/n)+" "+r+(i?"s":"")}t.exports=function(t,s){s=s||{};var a,u,c=typeof t;if("string"===c&&t.length>0)return function(t){if(!((t=String(t)).length>100)){var o=/^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(t);if(o){var s=parseFloat(o[1]);switch((o[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return 315576e5*s;case"weeks":case"week":case"w":return 6048e5*s;case"days":case"day":case"d":return s*i;case"hours":case"hour":case"hrs":case"hr":case"h":return s*r;case"minutes":case"minute":case"mins":case"min":case"m":return s*n;case"seconds":case"second":case"secs":case"sec":case"s":return s*e;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return s;default:return}}}}(t);if("number"===c&&isFinite(t))return s.long?(a=t,(u=Math.abs(a))>=i?o(a,u,i,"day"):u>=r?o(a,u,r,"hour"):u>=n?o(a,u,n,"minute"):u>=e?o(a,u,e,"second"):a+" ms"):function(t){var o=Math.abs(t);return o>=i?Math.round(t/i)+"d":o>=r?Math.round(t/r)+"h":o>=n?Math.round(t/n)+"m":o>=e?Math.round(t/e)+"s":t+"ms"}(t);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(t))}},591:function(t,e,n){t=n.nmd(t),function(n,r){"use strict";var i={};n.PubSub?(i=n.PubSub,console.warn("PubSub already loaded, using existing version")):(n.PubSub=i,function(t){var e={},n=-1;function r(t,e,n){try{t(e,n)}catch(t){setTimeout(function(t){return function(){throw t}}(t),0)}}function i(t,e,n){t(e,n)}function o(t,n,o,s){var a,u=e[n],c=s?i:r;if(Object.prototype.hasOwnProperty.call(e,n))for(a in u)Object.prototype.hasOwnProperty.call(u,a)&&c(u[a],t,o)}function s(t){var n=String(t);return Boolean(Object.prototype.hasOwnProperty.call(e,n)&&function(t){var e;for(e in t)if(Object.prototype.hasOwnProperty.call(t,e))return!0;return!1}(e[n]))}function a(t,e,n,r){var i=function(t,e,n){return function(){var r=String(t),i=r.lastIndexOf(".");for(o(t,t,e,n);-1!==i;)i=(r=r.substr(0,i)).lastIndexOf("."),o(t,r,e,n);o(t,"*",e,n)}}(t="symbol"==typeof t?t.toString():t,e,r);return!!function(t){for(var e=String(t),n=s(e)||s("*"),r=e.lastIndexOf(".");!n&&-1!==r;)r=(e=e.substr(0,r)).lastIndexOf("."),n=s(e);return n}(t)&&(!0===n?i():setTimeout(i,0),!0)}t.publish=function(e,n){return a(e,n,!1,t.immediateExceptions)},t.publishSync=function(e,n){return a(e,n,!0,t.immediateExceptions)},t.subscribe=function(t,r){if("function"!=typeof r)return!1;t="symbol"==typeof t?t.toString():t,Object.prototype.hasOwnProperty.call(e,t)||(e[t]={});var i="uid_"+String(++n);return e[t][i]=r,i},t.subscribeAll=function(e){return t.subscribe("*",e)},t.subscribeOnce=function(e,n){var r=t.subscribe(e,(function(){t.unsubscribe(r),n.apply(this,arguments)}));return t},t.clearAllSubscriptions=function(){e={}},t.clearSubscriptions=function(t){var n;for(n in e)Object.prototype.hasOwnProperty.call(e,n)&&0===n.indexOf(t)&&delete e[n]},t.countSubscriptions=function(t){var n,r,i=0;for(n in e)if(Object.prototype.hasOwnProperty.call(e,n)&&0===n.indexOf(t)){for(r in e[n])i++;break}return i},t.getSubscriptions=function(t){var n,r=[];for(n in e)Object.prototype.hasOwnProperty.call(e,n)&&0===n.indexOf(t)&&r.push(n);return r},t.unsubscribe=function(n){var r,i,o,s="string"==typeof n&&(Object.prototype.hasOwnProperty.call(e,n)||function(t){var n;for(n in e)if(Object.prototype.hasOwnProperty.call(e,n)&&0===n.indexOf(t))return!0;return!1}(n)),a=!s&&"string"==typeof n,u="function"==typeof n,c=!1;if(!s){for(r in e)if(Object.prototype.hasOwnProperty.call(e,r)){if(i=e[r],a&&i[n]){delete i[n],c=n;break}if(u)for(o in i)Object.prototype.hasOwnProperty.call(i,o)&&i[o]===n&&(delete i[o],c=!0)}return c}t.clearSubscriptions(n)}}(i)),void 0!==t&&t.exports&&(e=t.exports=i),e.PubSub=i,t.exports=e=i}("object"==typeof window&&window||this)},984:()=>{}},e={};function n(r){var i=e[r];if(void 0!==i)return i.exports;var o=e[r]={id:r,loaded:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.loaded=!0,o.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var r in e)n.o(e,r)&&!n.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),n.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.nmd=t=>(t.paths=[],t.children||(t.children=[]),t),(()=>{"use strict";var t={};n.r(t),n.d(t,{ChannelFollowEvent:()=>Q,ChannelPointCustomRewardRedemptionAddEvent:()=>Y});var e={};n.r(e),n.d(e,{EventSceneSwitch:()=>gt});var r={};n.r(r),n.d(r,{SetCurrentScene:()=>yt,SetSourceFilterSettings:()=>_t});var i,o,s,a,u=new Map,c=new Map,l=new Map;(o=i||(i={}))[o.Constant=0]="Constant",o[o.Instance=1]="Instance",o[o.Factory=2]="Factory",(a=s||(s={}))[a.Container=0]="Container",a[a.Resolution=1]="Resolution",a[a.Singleton=2]="Singleton",a[a.Transient=3]="Transient";var f=class{constructor(t){this.impl=t,this.type=i.Instance}},h=class extends f{constructor(){super(...arguments),this.scope=s.Container,this.cache=new WeakMap}},p=class extends f{constructor(){super(...arguments),this.scope=s.Resolution}},d=class extends f{constructor(t){super(t),this.impl=t,this.scope=s.Singleton}},v=class extends f{constructor(){super(...arguments),this.scope=s.Transient}},g=t=>{const e=Symbol(t);return{__t:null,__d:t,__s:e,__o:!1,optional:{__t:null,__d:t,__s:e,__o:!0}}},y=class{constructor(){this.parent=null,this.map=new Map}set(t,e,n=y.notag){const r=this.map.get(e.__s);r?r.set(n,t):this.map.set(e.__s,(new Map).set(n,t))}find(t,e,n){const r=this.map.get(t.__s);if(void 0!==r){if(n){const t=r.get(n);if(t)return t}if(e)for(let t=0,n=e.length;t<n;t+=1){const n=r.get(e[t]);if(n)return n}return r.get(y.notag)}}resolve(t,e,n,r){const i=this.find(t,n,r);return void 0===i?this.parent?this.parent.resolve(t,e,n,r):null:i instanceof y?(e.vaults.push(i),i.resolve(t,e,n,r)):i}get(t,e,n,r){const i=this.resolve(t,e,n,r);if(i)return i;for(let i=0,o=e.vaults,s=o.length;i<s;i+=1){const s=o[i].resolve(t,e,n,r);if(s)return s}return null}from(t){const e=new y;return e.parent=this.parent,this.map.forEach(((n,r)=>{e.map.set(r,t(n))})),e}clone(){return this.from((t=>new Map(t)))}},_=y;_.notag=Symbol("NO_TAG");var m=class{constructor(t,e){this.vault=t,this.condition=e}static vault(t){return t.vault}bind(t){return new class{constructor(t,e,n){this.vault=t,this.token=e,this.condition=n}toConstant(t){this.vault.set(new class{constructor(t){this.impl=t,this.type=i.Constant}}(t),this.token,this.condition)}toFactory(t,e){this.vault.set(new class{constructor(t){this.impl=t,this.type=i.Factory}}({creator:t,initializer:e}),this.token,this.condition)}toInstance(t){return new class{constructor(t,e,n,r){this.vault=t,this.impl=e,this.token=n,this.condition=r}inContainerScope(){this.set(h)}inResolutionScope(){this.set(p)}inSingletonScope(){this.set(d)}inTransientScope(){this.set(v)}set(t){this.vault.set(new t(this.impl),this.token,this.condition)}}(this.vault,t,this.token,this.condition)}}(this.vault,t,this.condition)}use(...t){return new class{constructor(t,e,n,r){this.vault=t,this.tokens=e,this.getVault=n,this.condition=r}from(t){const{tokens:e}=this;for(let n=0,r=e.length;n<r;n+=1)this.vault.set(this.getVault(t),e[n],this.condition)}}(this.vault,t,m.vault,this.condition)}},b=class extends m{when(t){return new m(this.vault,t)}},w=class extends b{constructor(){super(new _)}},C=class{constructor(t=new Map,e=[]){this.instances=t,this.vaults=e}split(){return new C(this.instances,this.vaults.slice())}},k=class extends w{constructor(){super(),this.snapshot=null}extend(t){return this.vault.parent=null===t?null:t.vault,this}clone(){const t=new k;return t.vault=this.vault.clone(),t}get(t,e){return this.resolveToken(t,e)}resolveTokens(t,e,n,r){return t.map((t=>this.resolveToken(t,n,r,e.split())))}resolveToken(t,e,n,r=new C){const i=this.vault.get(t,r,e,n);if(i)return this.resolveBinding(i,r);if(!t.__o)throw new Error(`No matching bindings found for '${t.__d}' token.`)}resolveBinding(t,e){return(t=>t.type===i.Instance)(t)?(t=>t.scope===s.Singleton)(t)?this.resolveCache(t,e,(()=>t.cache),(e=>{t.cache=e})):(t=>t.scope===s.Container)(t)?this.resolveCache(t,e,(()=>t.cache.get(this.vault)),(e=>{t.cache.set(this.vault,e)})):(t=>t.scope===s.Resolution)(t)?this.resolveCache(t,e,(()=>e.instances.get(t)),(n=>{e.instances.set(t,n)})):this.createInstance(t.impl,e):(t=>t.type===i.Factory)(t)?(...n)=>{const r=this.createInstance(t.impl.creator,e);return r instanceof Promise?r.then((e=>k.resolveInitialization(e,n,t.impl.initializer))):k.resolveInitialization(r,n,t.impl.initializer)}:t.impl}resolveCache(t,e,n,r){const i=n();if(void 0!==i)return i;const o=this.createInstance(t.impl,e);return r(o),o}createInstance(t,e){const n=this.getParameters(t,e),r=u.get(t);if(void 0!==r)return r?t(...n):new t(...n);try{const e=t(...n);return u.set(t,!0),e}catch(e){const r=new t(...n);return u.set(t,!1),r}}getParameters(t,e){const n=c.get(t);if(n)return this.resolveTokens(n,e,l.get(t),t);if(0===t.length)return[];throw new Error(`Missing required 'injected' registration of '${t.name}'`)}static resolveInitialization(t,e,n){const r=null==n?void 0:n(t,...e);return r instanceof Promise?r.then((()=>t)):t}},S=(t,...e)=>(c.set(t,e),t);class A{set callback(t){this._callback=t}constructor(t,e){this.transformers=t,this.eventBus=e,this.notifyListener=(t,e)=>{this._callback&&this._callback(t,e)}}setCallback(t){this._callback=t}registerTransformers(t){this.registerEventTransformers(t),this.registerRequestTransformers(t)}selectTransformer(t,e){if(void 0===t||"string"!=typeof e||void 0===this.transformers)return;const n=this.transformers[t];return null!=n&&e in n&&"function"!=typeof n[e]?n[e]:void 0}}var x=n(608),$=n.n(x);let E={};function O(t,e){return(0,x.get)(E,t,e)}function R(t){const e=t;return"name"in e&&"string"==typeof e.name&&"type"in e&&"string"==typeof e.type}function T(t,e){let n={};for(const r of e){if("function"!=typeof r)break;const e=new r,i=j(t,e);i&&(n[i]=e)}return n}function j(t,e){return!!function(t,e){switch(t){case"event":return P(e);case"request":return M(e);case"response":return I(e)}return!1}(t,e)&&e[{event:"adapterEventName",request:"systemRequestName",response:"adapterResponseName"}[t]]}function P(t){return"object"==typeof t&&("adapterEventName"in t&&"systemEventName"in t&&"buildEventMessage"in t)}function M(t){return"object"==typeof t&&("adapterRequestName"in t&&"systemRequestName"in t&&"buildRequestMessage"in t)}function I(t){return"object"==typeof t&&("adapterResponseName"in t&&"systemResponseName"in t&&"buildResponseMessage"in t)}const F="obs.scene.switched",N="obs.request.scene.switch",B="obs.websocket.authorized",U="twitch.event.channel.follow",z="twitch.event.channel.reward.redemption.add",L="app.control.overlay.online";class W{constructor(){this.autoConnect=!1,this.portMessageHandler=this.portMessageHandler.bind(this)}get status(){return{serviceName:"controlPort",status:this.workerPort?"connected":"disconnected",details:{}}}setPort(t){this.workerPort&&this.closePort(),this.workerPort=t,void 0!==t&&t.addEventListener("message",this.portMessageHandler),!0===this.autoConnect&&this.connect()}setCallback(t){console.log("setting callback",t),this.portMessageCallback=t}closePort(){this.workerPort?.close(),this.workerPort?.removeEventListener("message",this.portMessageHandler)}connect(){return this.workerPort?(this.workerPort.start(),this.autoConnect=!1,Promise.resolve(!0)):(this.autoConnect=!0,Promise.resolve(!1))}sendMessage(t,e){this.workerPort?(e.source="Port",this.workerPort.postMessage(e)):console.warn("Attempting to send a worker port message before a port has been supplied",{messageName:t,message:e})}portMessageHandler(t){if(!this.portMessageCallback)return void console.warn("Port message received before a portMessageCallback has been supplied",t);const e=t instanceof MessageEvent?t.data:t;R(e)&&e.name&&this.portMessageCallback(e.name,e)}}var D=n(591);class H extends W{constructor(t){super(),this.sharedWorker=t}connect(){return this.setPort(this.sharedWorker.port),super.connect()}disconnect(){this.closePort()}}class q extends class{constructor(t){this.eventBus=t,this.messageHandlerPrefix="_message",this.portMessageHandler=(t,e)=>{e.source="Port",console.log("in port message handler"),this.callMessageHandler(t,e)&&(console.log("Publishing port message",t,e),this.eventBus.publish(t,e))}}callMessageHandler(t,e){const n=this[$().camelCase(this.messageHandlerPrefix+t)];return"function"!=typeof n||n(e)}}{constructor(t,e){super(e),this.controlWorker=t,this.defaultOptions={targetSelector:".overlay-container",debugSelector:"debug-container",componentMaps:{}},this.options={},this.connectComponent=t=>{const e=t;e.componentType&&e.registerCallbacks&&e.registerCallbacks(this.eventBus)},this.busMessageHandler=(t,e)=>{R(e)&&e.name===t?e.source&&"Port"===e.source?console.debug(`Overlay: Skipping port message (${t})`):(console.debug(`Overlay: dispatching message (${t})`),this.controlWorker.sendMessage(t,e)):console.warn("Overlay: received non-system bus message")},this.startControlWorker()}async init(t={}){this.options={...this.defaultOptions,...t},this.locateElements(),this.connectContainerComponents(this.container),this.eventBus.subscribe("*",this.busMessageHandler),this.controlWorker.sendMessage(L,{type:"controlMessage",name:L})}locateElements(){this.container=window.document.querySelector(this.options.targetSelector),this.debugContainer=window.document.querySelector(this.options.debugSelector)}connectContainerComponents(t){null!=t?t.childNodes.forEach(this.connectComponent):console.warn("Overlay: Attempting to connect a container while it is undefined or null")}startControlWorker(){console.debug("Overlay: Starting control worker"),this.controlWorker.setCallback(this.portMessageHandler),this.controlWorker.connect()}}const V={tauTransformers:g("tauTransformerSet"),tauOptions:g("tauOptions")},J={serviceAdapters:g("serviceAdapters"),obsAdapter:g("obsAdapter"),tauAdapter:g("tauAdapter"),centralController:g("centralController")};var Z=n(171),G=n.n(Z);class K extends A{get status(){return{serviceName:"tau",status:this.getSocketStatus(),details:{}}}constructor(t,e,n={}){super(t,e),this.defaultOptions={socketProtocol:"ws://",socketPort:"8000",socketHost:"localhost",socketPath:"/ws/twitch-events/",tauSecret:!1,connectTimeout:1e3},this.handleConnectionOpened=(t,e)=>{setTimeout((()=>{e(!1)}),this.options.connectTimeout);try{this.tauSocket?.addEventListener("message",this.handleWebsocketMessage),this.tauSocket?.addEventListener("open",this.buildAuthHandler(t,e)),this.tauSocket?.addEventListener("error",(()=>{console.info("connect failed?!?!"),e(!1)}))}catch(t){console.error("what the heckfart",t)}},this.buildAuthHandler=(t,e)=>(console.log("building auth handler"),n=>{console.log("Auth handler called"),this.tauSocket?.send(JSON.stringify({token:this.options.tauSecret}),(n=>{if(n)return console.error("Unable to connect to TAU",n),void e(!1);console.log("uhm",n),t(!0)}))}),this.registerTransformers(this.transformers),this.options={...this.defaultOptions,...n},this.handleConnectionOpened=this.handleConnectionOpened.bind(this),this.handleWebsocketMessage=this.handleWebsocketMessage.bind(this),this.registerTransformers(t)}async connect(){const t=this.options,e=t.socketProtocol+t.socketHost+":"+t.socketPort+t.socketPath;try{return this.tauSocket=new(G())(e),new Promise(this.handleConnectionOpened)}catch(t){return console.error("Unable to connect to tau at URI",e),console.error(t),Promise.resolve(!1)}}setCallback(t){this.callback=t}sendMessage(t,e){throw new Error("Method not implemented."+e)}registerEventTransformers(t){if(t.event&&void 0!==this.tauSocket)for(const e of Object.values(t.event))this.tauSocket.on(e.adapterEventName,this.handleWebsocketMessage)}registerRequestTransformers(t){if(t.request)for(const e of Object.values(t.request))this.eventBus.subscribe(e.systemRequestName,this.sendMessage)}registerResponseTransformers(t){}handleWebsocketMessage(t){console.debug("received tau message",t);try{const e=this.parseSocketMessage(t),n=e.event_type;if(console.log("tau one "),!n)throw{message:"Unsupported message type: "+Object.keys(e).join(", "),details:{message:t}};console.log("tau 2");const r=this.selectTransformer("event",e.event_type);if(!P(r))throw new Error("Unable to locate transformer for message: "+n);console.log("tau 3");const i=r.buildEventMessage(e);console.log("in tau? "+i.name+JSON.stringify(i)),this.notifyListener(i.name,i)}catch(e){const n=e instanceof Error?e.message:e;console.warn("Unable to parse Tau message: "+n+" \n "+JSON.stringify(t))}}parseSocketMessage(t){return JSON.parse(t.data)}getSocketStatus(){if(!this.tauSocket)return"disconnected";switch(this.tauSocket.readyState){case G().CLOSED:return"disconnected";case G().CLOSING:return"disconnecting";case G().CONNECTING:return"connecting";case G().OPEN:return"connected"}}}class Q{constructor(){this.adapterEventName="channel-follow",this.systemEventName=U}buildEventMessage(t){return{type:"twitchMessage",name:U,user_id:t.event_data.user_id,user_name:t.event_data.user_name,user_login:t.event_data.user_login,followed_at:t.event_data.followed_at}}}class Y{constructor(){this.adapterEventName="channel-channel_points_custom_reward_redemption-add",this.systemEventName=z}buildEventMessage(t){return{type:"twitchMessage",name:z,id:t.event_data.id,user:{id:t.event_data.user_id,userName:t.event_data.user_name,userLogin:t.event_data.user_login},broadcaster:{id:t.event_data.broadcaster_user_id,userLogin:t.event_data.broadcaster_user_login,userName:t.event_data.broadcaster_user_name},redeemedAt:t.event_data.redeemed_at,userInput:t.event_data.user_input,reward:t.event_data.reward}}}const X={portMessageAdapter:g("portMessageAdapter"),frameworkEventBus:g("eventBus")};S(K,V.tauTransformers,X.frameworkEventBus,V.tauOptions.optional);const tt=new w;tt.bind(J.tauAdapter).toInstance(K).inSingletonScope(),tt.bind(V.tauTransformers).toInstance((()=>({event:T("event",Object.values(t))}))).inSingletonScope(),tt.bind(V.tauOptions).toInstance((()=>O("adapters.tau",{}))).inTransientScope();var et,nt,rt,it=n(299),ot=n(86),st=n(830),at=n(306);function ut(){return ut=Object.assign?Object.assign.bind():function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t},ut.apply(this,arguments)}!function(t){t[t.Hello=0]="Hello",t[t.Identify=1]="Identify",t[t.Identified=2]="Identified",t[t.Reidentify=3]="Reidentify",t[t.Event=5]="Event",t[t.Request=6]="Request",t[t.RequestResponse=7]="RequestResponse",t[t.RequestBatch=8]="RequestBatch",t[t.RequestBatchResponse=9]="RequestBatchResponse"}(et||(et={})),function(t){t[t.None=0]="None",t[t.General=1]="General",t[t.Config=2]="Config",t[t.Scenes=4]="Scenes",t[t.Inputs=8]="Inputs",t[t.Transitions=16]="Transitions",t[t.Filters=32]="Filters",t[t.Outputs=64]="Outputs",t[t.SceneItems=128]="SceneItems",t[t.MediaInputs=256]="MediaInputs",t[t.Vendors=512]="Vendors",t[t.Ui=1024]="Ui",t[t.All=1023]="All",t[t.InputVolumeMeters=65536]="InputVolumeMeters",t[t.InputActiveStateChanged=131072]="InputActiveStateChanged",t[t.InputShowStateChanged=262144]="InputShowStateChanged",t[t.SceneItemTransformChanged=524288]="SceneItemTransformChanged"}(nt||(nt={})),function(t){t[t.None=-1]="None",t[t.SerialRealtime=0]="SerialRealtime",t[t.SerialFrame=1]="SerialFrame",t[t.Parallel=2]="Parallel"}(rt||(rt={}));const ct=["authentication","rpcVersion"],lt=it("obs-websocket-js");class ft extends Error{constructor(t,e){super(e),this.code=void 0,this.code=t}}class ht extends ot{constructor(...t){super(...t),this._identified=!1,this.internalListeners=new ot,this.socket=void 0}static generateMessageId(){return String(ht.requestCounter++)}get identified(){return this._identified}async connect(t="ws://127.0.0.1:4455",e,n={}){var r=this;this.socket&&await this.disconnect();try{const i=this.internalEventPromise("ConnectionClosed"),o=this.internalEventPromise("ConnectionError");return await Promise.race([async function(){const i=await r.createConnection(t);return r.emit("Hello",i),r.identify(i,e,n)}(),new Promise(((t,e)=>{o.then((t=>{t.message&&e(t)})),i.then((t=>{e(t)}))}))])}catch(t){throw await this.disconnect(),t}}async disconnect(){if(!this.socket||this.socket.readyState===Z.CLOSED)return;const t=this.internalEventPromise("ConnectionClosed");this.socket.close(),await t}async reidentify(t){const e=this.internalEventPromise(`op:${et.Identified}`);return await this.message(et.Reidentify,t),e}async call(t,e){const n=ht.generateMessageId(),r=this.internalEventPromise(`res:${n}`);await this.message(et.Request,{requestId:n,requestType:t,requestData:e});const{requestStatus:i,responseData:o}=await r;if(!i.result)throw new ft(i.code,i.comment);return o}async callBatch(t,e={}){const n=ht.generateMessageId(),r=this.internalEventPromise(`res:${n}`);await this.message(et.RequestBatch,ut({requestId:n,requests:t},e));const{results:i}=await r;return i}cleanup(){this.socket&&(this.socket.onopen=null,this.socket.onmessage=null,this.socket.onerror=null,this.socket.onclose=null,this.socket=void 0,this._identified=!1,this.internalListeners.removeAllListeners())}async createConnection(t){var e;const n=this.internalEventPromise("ConnectionOpened"),r=this.internalEventPromise(`op:${et.Hello}`);this.socket=new Z(t,this.protocol),this.socket.onopen=this.onOpen.bind(this),this.socket.onmessage=this.onMessage.bind(this),this.socket.onerror=this.onError.bind(this),this.socket.onclose=this.onClose.bind(this),await n;const i=null==(e=this.socket)?void 0:e.protocol;if(!i)throw new ft(-1,"Server sent no subprotocol");if(i!==this.protocol)throw new ft(-1,"Server sent an invalid subprotocol");return r}async identify(t,e,n={}){let{authentication:r,rpcVersion:i}=t,o=function(t,e){if(null==t)return{};var n,r,i={},o=Object.keys(t);for(r=0;r<o.length;r++)n=o[r],e.indexOf(n)>=0||(i[n]=t[n]);return i}(t,ct);const s=ut({rpcVersion:i},n);r&&e&&(s.authentication=function(t,e,n){const r=at.stringify(st(n+t));return at.stringify(st(r+e))}(r.salt,r.challenge,e));const a=this.internalEventPromise(`op:${et.Identified}`);await this.message(et.Identify,s);const u=await a;return this._identified=!0,this.emit("Identified",u),ut({rpcVersion:i},o,u)}async message(t,e){if(!this.socket)throw new Error("Not connected");if(!this.identified&&1!==t)throw new Error("Socket not identified");const n=await this.encodeMessage({op:t,d:e});this.socket.send(n)}async internalEventPromise(t){return new Promise((e=>{this.internalListeners.once(t,e)}))}onOpen(t){lt("socket.open"),this.emit("ConnectionOpened"),this.internalListeners.emit("ConnectionOpened",t)}async onMessage(t){try{const{op:e,d:n}=await this.decodeMessage(t.data);if(lt("socket.message: %d %j",e,n),void 0===e||void 0===n)return;switch(e){case et.Event:{const{eventType:t,eventData:e}=n;return void this.emit(t,e)}case et.RequestResponse:case et.RequestBatchResponse:{const{requestId:t}=n;return void this.internalListeners.emit(`res:${t}`,n)}default:this.internalListeners.emit(`op:${e}`,n)}}catch(t){lt("error handling message: %o",t)}}onError(t){lt("socket.error: %o",t);const e=new ft(-1,t.message);this.emit("ConnectionError",e),this.internalListeners.emit("ConnectionError",e)}onClose(t){lt("socket.close: %s (%d)",t.reason,t.code);const e=new ft(t.code,t.reason);this.emit("ConnectionClosed",e),this.internalListeners.emit("ConnectionClosed",e),this.cleanup()}}ht.requestCounter=1,"undefined"!=typeof exports&&Object.defineProperty(exports,"__esModule",{value:!0});class pt extends ht{constructor(...t){super(...t),this.protocol="obswebsocket.json"}async encodeMessage(t){return JSON.stringify(t)}async decodeMessage(t){return JSON.parse(t)}}const dt={obsWebsocket:g("obsWebsocket"),obsTransformerSet:g("obsTransformerSet"),obsV5Options:g("obsV5Options")};class vt extends A{get status(){return{serviceName:"obsV5Websocket",status:this.websocketConnected?"connected":"disconnected",details:{}}}constructor(t,e,n,r={}){super(e,n),this.websocket=t,this.defaultOptions={socketPort:4444,socketPassword:"",socketHost:"127.0.0.1"},this.websocketConnected=!1,this.sendMessage=async(t,e)=>{const n=this.selectTransformer("request",t);if(!M(n))return void console.warn("Unable to select transformer for system message",t,e);const r=n.buildRequestMessage(e),i=await this.websocket.call(n.adapterRequestName,r??void 0);if(!I(n))return;const o=n.buildResponseMessage(i);this.notifyListener(o.name,o)},this.markActive=()=>{this.websocketConnected=!0},this.markInactive=()=>{this.websocketConnected=!1},this.options={...this.defaultOptions,...r},this.registerTransformers(this.transformers),this.registerListeners(),this.options={...this.defaultOptions,...r}}async connect(){console.log("shared worker obs connect");try{const t=`ws://${this.options.socketHost}:${this.options.socketPort}`;return await this.websocket.connect(t,this.options.socketPassword,{}),console.log("after auth message"),this.markActive(),this.notifyListener(B,{type:"obsResponse",name:B}),!0}catch(t){return console.error("Unable to connect to obs websocket",{errorDetails:t}),!1}}registerListeners(){this.websocket.on("ConnectionClosed",this.markInactive)}registerEventTransformers(t){if(t.event)for(const e of Object.values(t.event))this.websocket.on(e.adapterEventName,((...t)=>this.handleEvent(e.adapterEventName,t[0])))}registerRequestTransformers(t){if(t.request)for(const e of Object.values(t.request))this.eventBus.subscribe(e.systemRequestName,this.sendMessage)}registerResponseTransformers(t){}handleEvent(t,e){}}class gt{constructor(){this.adapterEventName="CurrentProgramSceneChanged",this.systemEventName=F}buildEventMessage(t){if(!t)throw"Invalid message format supplied";return{type:"obsEvent",name:F,sceneName:t?t.sceneName:"unknown"}}}class yt{constructor(){this.adapterRequestName="SetCurrentProgramScene",this.adapterResponseName="SetCurrentProgramScene",this.systemRequestName=N,this.systemResponseName="obs.scene.response.setCurrent"}buildRequestMessage(t){return{sceneName:t.sceneName}}buildResponseMessage(t){throw new Error("Method not implemented.")}}class _t{constructor(){this.adapterRequestName="SetSourceFilterSettings",this.adapterResponseName="SetSourceFilterSettings",this.systemRequestName="obs.request.source.setFilterSettings",this.systemResponseName="obs.source.filter.setttings.set"}buildRequestMessage(t){return{sourceName:t.sourceName,filterName:t.filterName,filterSettings:t.settings}}buildResponseMessage(t){throw new Error("Method not implemented.")}}S(vt,dt.obsWebsocket,dt.obsTransformerSet,X.frameworkEventBus,dt.obsV5Options.optional);const mt=new w;mt.bind(J.obsAdapter).toInstance(vt).inSingletonScope(),mt.bind(dt.obsV5Options).toInstance((()=>O("adapters.obs",{}))).inTransientScope(),mt.bind(dt.obsWebsocket).toInstance((()=>new pt)).inSingletonScope(),mt.bind(dt.obsTransformerSet).toInstance((()=>({event:T("event",Object.values(e)),request:T("request",Object.values(r))}))).inSingletonScope();const bt=mt,wt=new k;wt.bind(X.portMessageAdapter).toInstance(W).inTransientScope(),wt.bind(X.frameworkEventBus).toInstance(class{constructor(){this.unsubscribe=D.unsubscribe}publish(t,e){return(0,D.publish)(t,e)}subscribe(t,e){return(0,D.subscribe)(t,((n,r)=>{const i=n;if(i&&r)if("*"===t){const t=r;e(t.name,t)}else R(r)&&e(i,r)}))}}).inSingletonScope();const Ct={controlSharedWorker:g("SharedWorker"),controlWorker:g("ControlWorker"),overlayController:g("overlayController")};S(H,Ct.controlSharedWorker);const kt=(new k).extend(wt);kt.bind(Ct.controlSharedWorker).toInstance((()=>new SharedWorker(O("controlWorkerPath",`//${document.location.host}/assets/js/control_worker.js`)))).inSingletonScope(),kt.bind(Ct.controlWorker).toInstance(H).inSingletonScope(),kt.bind(Ct.overlayController).toInstance(q).inSingletonScope();const St=O("obs.adapterVersion","v5"),At=new k;At.extend(wt),At.use(J.tauAdapter).from(tt),"v5"===St&&At.use(J.obsAdapter).from(bt),At.bind(J.serviceAdapters).toInstance((()=>{const t=[];return t.push(At.get(J.obsAdapter)),t.push(At.get(J.tauAdapter)),t})).inSingletonScope();const xt=t=>e=>"function"==typeof e?((t,e)=>(customElements.define(t,e),e))(t,e):((t,e)=>{const{kind:n,elements:r}=e;return{kind:n,elements:r,finisher(e){customElements.define(t,e)}}})(t,e),$t=(t,e)=>"method"===e.kind&&e.descriptor&&!("value"in e.descriptor)?{...e,finisher(n){n.createProperty(e.key,t)}}:{kind:"field",key:Symbol(),placement:"own",descriptor:{},originalKey:e.key,initializer(){"function"==typeof e.initializer&&(this[e.key]=e.initializer.call(this))},finisher(n){n.createProperty(e.key,t)}};function Et(t){return(e,n)=>void 0!==n?((t,e,n)=>{e.constructor.createProperty(n,t)})(t,e,n):$t(t,e)}function Ot(t){return Et({...t,state:!0})}var Rt;null===(Rt=window.HTMLSlotElement)||void 0===Rt||Rt.prototype.assignedElements;const Tt=window,jt=Tt.ShadowRoot&&(void 0===Tt.ShadyCSS||Tt.ShadyCSS.nativeShadow)&&"adoptedStyleSheets"in Document.prototype&&"replace"in CSSStyleSheet.prototype,Pt=Symbol(),Mt=new WeakMap;class It{constructor(t,e,n){if(this._$cssResult$=!0,n!==Pt)throw Error("CSSResult is not constructable. Use `unsafeCSS` or `css` instead.");this.cssText=t,this.t=e}get styleSheet(){let t=this.o;const e=this.t;if(jt&&void 0===t){const n=void 0!==e&&1===e.length;n&&(t=Mt.get(e)),void 0===t&&((this.o=t=new CSSStyleSheet).replaceSync(this.cssText),n&&Mt.set(e,t))}return t}toString(){return this.cssText}}const Ft=jt?t=>t:t=>t instanceof CSSStyleSheet?(t=>{let e="";for(const n of t.cssRules)e+=n.cssText;return(t=>new It("string"==typeof t?t:t+"",void 0,Pt))(e)})(t):t;var Nt;const Bt=window,Ut=Bt.trustedTypes,zt=Ut?Ut.emptyScript:"",Lt=Bt.reactiveElementPolyfillSupport,Wt={toAttribute(t,e){switch(e){case Boolean:t=t?zt:null;break;case Object:case Array:t=null==t?t:JSON.stringify(t)}return t},fromAttribute(t,e){let n=t;switch(e){case Boolean:n=null!==t;break;case Number:n=null===t?null:Number(t);break;case Object:case Array:try{n=JSON.parse(t)}catch(t){n=null}}return n}},Dt=(t,e)=>e!==t&&(e==e||t==t),Ht={attribute:!0,type:String,converter:Wt,reflect:!1,hasChanged:Dt};class qt extends HTMLElement{constructor(){super(),this._$Ei=new Map,this.isUpdatePending=!1,this.hasUpdated=!1,this._$El=null,this.u()}static addInitializer(t){var e;this.finalize(),(null!==(e=this.h)&&void 0!==e?e:this.h=[]).push(t)}static get observedAttributes(){this.finalize();const t=[];return this.elementProperties.forEach(((e,n)=>{const r=this._$Ep(n,e);void 0!==r&&(this._$Ev.set(r,n),t.push(r))})),t}static createProperty(t,e=Ht){if(e.state&&(e.attribute=!1),this.finalize(),this.elementProperties.set(t,e),!e.noAccessor&&!this.prototype.hasOwnProperty(t)){const n="symbol"==typeof t?Symbol():"__"+t,r=this.getPropertyDescriptor(t,n,e);void 0!==r&&Object.defineProperty(this.prototype,t,r)}}static getPropertyDescriptor(t,e,n){return{get(){return this[e]},set(r){const i=this[t];this[e]=r,this.requestUpdate(t,i,n)},configurable:!0,enumerable:!0}}static getPropertyOptions(t){return this.elementProperties.get(t)||Ht}static finalize(){if(this.hasOwnProperty("finalized"))return!1;this.finalized=!0;const t=Object.getPrototypeOf(this);if(t.finalize(),void 0!==t.h&&(this.h=[...t.h]),this.elementProperties=new Map(t.elementProperties),this._$Ev=new Map,this.hasOwnProperty("properties")){const t=this.properties,e=[...Object.getOwnPropertyNames(t),...Object.getOwnPropertySymbols(t)];for(const n of e)this.createProperty(n,t[n])}return this.elementStyles=this.finalizeStyles(this.styles),!0}static finalizeStyles(t){const e=[];if(Array.isArray(t)){const n=new Set(t.flat(1/0).reverse());for(const t of n)e.unshift(Ft(t))}else void 0!==t&&e.push(Ft(t));return e}static _$Ep(t,e){const n=e.attribute;return!1===n?void 0:"string"==typeof n?n:"string"==typeof t?t.toLowerCase():void 0}u(){var t;this._$E_=new Promise((t=>this.enableUpdating=t)),this._$AL=new Map,this._$Eg(),this.requestUpdate(),null===(t=this.constructor.h)||void 0===t||t.forEach((t=>t(this)))}addController(t){var e,n;(null!==(e=this._$ES)&&void 0!==e?e:this._$ES=[]).push(t),void 0!==this.renderRoot&&this.isConnected&&(null===(n=t.hostConnected)||void 0===n||n.call(t))}removeController(t){var e;null===(e=this._$ES)||void 0===e||e.splice(this._$ES.indexOf(t)>>>0,1)}_$Eg(){this.constructor.elementProperties.forEach(((t,e)=>{this.hasOwnProperty(e)&&(this._$Ei.set(e,this[e]),delete this[e])}))}createRenderRoot(){var t;const e=null!==(t=this.shadowRoot)&&void 0!==t?t:this.attachShadow(this.constructor.shadowRootOptions);return((t,e)=>{jt?t.adoptedStyleSheets=e.map((t=>t instanceof CSSStyleSheet?t:t.styleSheet)):e.forEach((e=>{const n=document.createElement("style"),r=Tt.litNonce;void 0!==r&&n.setAttribute("nonce",r),n.textContent=e.cssText,t.appendChild(n)}))})(e,this.constructor.elementStyles),e}connectedCallback(){var t;void 0===this.renderRoot&&(this.renderRoot=this.createRenderRoot()),this.enableUpdating(!0),null===(t=this._$ES)||void 0===t||t.forEach((t=>{var e;return null===(e=t.hostConnected)||void 0===e?void 0:e.call(t)}))}enableUpdating(t){}disconnectedCallback(){var t;null===(t=this._$ES)||void 0===t||t.forEach((t=>{var e;return null===(e=t.hostDisconnected)||void 0===e?void 0:e.call(t)}))}attributeChangedCallback(t,e,n){this._$AK(t,n)}_$EO(t,e,n=Ht){var r;const i=this.constructor._$Ep(t,n);if(void 0!==i&&!0===n.reflect){const o=(void 0!==(null===(r=n.converter)||void 0===r?void 0:r.toAttribute)?n.converter:Wt).toAttribute(e,n.type);this._$El=t,null==o?this.removeAttribute(i):this.setAttribute(i,o),this._$El=null}}_$AK(t,e){var n;const r=this.constructor,i=r._$Ev.get(t);if(void 0!==i&&this._$El!==i){const t=r.getPropertyOptions(i),o="function"==typeof t.converter?{fromAttribute:t.converter}:void 0!==(null===(n=t.converter)||void 0===n?void 0:n.fromAttribute)?t.converter:Wt;this._$El=i,this[i]=o.fromAttribute(e,t.type),this._$El=null}}requestUpdate(t,e,n){let r=!0;void 0!==t&&(((n=n||this.constructor.getPropertyOptions(t)).hasChanged||Dt)(this[t],e)?(this._$AL.has(t)||this._$AL.set(t,e),!0===n.reflect&&this._$El!==t&&(void 0===this._$EC&&(this._$EC=new Map),this._$EC.set(t,n))):r=!1),!this.isUpdatePending&&r&&(this._$E_=this._$Ej())}async _$Ej(){this.isUpdatePending=!0;try{await this._$E_}catch(t){Promise.reject(t)}const t=this.scheduleUpdate();return null!=t&&await t,!this.isUpdatePending}scheduleUpdate(){return this.performUpdate()}performUpdate(){var t;if(!this.isUpdatePending)return;this.hasUpdated,this._$Ei&&(this._$Ei.forEach(((t,e)=>this[e]=t)),this._$Ei=void 0);let e=!1;const n=this._$AL;try{e=this.shouldUpdate(n),e?(this.willUpdate(n),null===(t=this._$ES)||void 0===t||t.forEach((t=>{var e;return null===(e=t.hostUpdate)||void 0===e?void 0:e.call(t)})),this.update(n)):this._$Ek()}catch(t){throw e=!1,this._$Ek(),t}e&&this._$AE(n)}willUpdate(t){}_$AE(t){var e;null===(e=this._$ES)||void 0===e||e.forEach((t=>{var e;return null===(e=t.hostUpdated)||void 0===e?void 0:e.call(t)})),this.hasUpdated||(this.hasUpdated=!0,this.firstUpdated(t)),this.updated(t)}_$Ek(){this._$AL=new Map,this.isUpdatePending=!1}get updateComplete(){return this.getUpdateComplete()}getUpdateComplete(){return this._$E_}shouldUpdate(t){return!0}update(t){void 0!==this._$EC&&(this._$EC.forEach(((t,e)=>this._$EO(e,this[e],t))),this._$EC=void 0),this._$Ek()}updated(t){}firstUpdated(t){}}var Vt;qt.finalized=!0,qt.elementProperties=new Map,qt.elementStyles=[],qt.shadowRootOptions={mode:"open"},null==Lt||Lt({ReactiveElement:qt}),(null!==(Nt=Bt.reactiveElementVersions)&&void 0!==Nt?Nt:Bt.reactiveElementVersions=[]).push("1.6.1");const Jt=window,Zt=Jt.trustedTypes,Gt=Zt?Zt.createPolicy("lit-html",{createHTML:t=>t}):void 0,Kt=`lit$${(Math.random()+"").slice(9)}$`,Qt="?"+Kt,Yt=`<${Qt}>`,Xt=document,te=(t="")=>Xt.createComment(t),ee=t=>null===t||"object"!=typeof t&&"function"!=typeof t,ne=Array.isArray,re=/<(?:(!--|\/[^a-zA-Z])|(\/?[a-zA-Z][^>\s]*)|(\/?$))/g,ie=/-->/g,oe=/>/g,se=RegExp(">|[ \t\n\f\r](?:([^\\s\"'>=/]+)([ \t\n\f\r]*=[ \t\n\f\r]*(?:[^ \t\n\f\r\"'`<>=]|(\"|')|))|$)","g"),ae=/'/g,ue=/"/g,ce=/^(?:script|style|textarea|title)$/i,le=t=>(e,...n)=>({_$litType$:t,strings:e,values:n}),fe=le(1),he=(le(2),Symbol.for("lit-noChange")),pe=Symbol.for("lit-nothing"),de=new WeakMap,ve=Xt.createTreeWalker(Xt,129,null,!1),ge=(t,e)=>{const n=t.length-1,r=[];let i,o=2===e?"<svg>":"",s=re;for(let e=0;e<n;e++){const n=t[e];let a,u,c=-1,l=0;for(;l<n.length&&(s.lastIndex=l,u=s.exec(n),null!==u);)l=s.lastIndex,s===re?"!--"===u[1]?s=ie:void 0!==u[1]?s=oe:void 0!==u[2]?(ce.test(u[2])&&(i=RegExp("</"+u[2],"g")),s=se):void 0!==u[3]&&(s=se):s===se?">"===u[0]?(s=null!=i?i:re,c=-1):void 0===u[1]?c=-2:(c=s.lastIndex-u[2].length,a=u[1],s=void 0===u[3]?se:'"'===u[3]?ue:ae):s===ue||s===ae?s=se:s===ie||s===oe?s=re:(s=se,i=void 0);const f=s===se&&t[e+1].startsWith("/>")?" ":"";o+=s===re?n+Yt:c>=0?(r.push(a),n.slice(0,c)+"$lit$"+n.slice(c)+Kt+f):n+Kt+(-2===c?(r.push(void 0),e):f)}const a=o+(t[n]||"<?>")+(2===e?"</svg>":"");if(!Array.isArray(t)||!t.hasOwnProperty("raw"))throw Error("invalid template strings array");return[void 0!==Gt?Gt.createHTML(a):a,r]};class ye{constructor({strings:t,_$litType$:e},n){let r;this.parts=[];let i=0,o=0;const s=t.length-1,a=this.parts,[u,c]=ge(t,e);if(this.el=ye.createElement(u,n),ve.currentNode=this.el.content,2===e){const t=this.el.content,e=t.firstChild;e.remove(),t.append(...e.childNodes)}for(;null!==(r=ve.nextNode())&&a.length<s;){if(1===r.nodeType){if(r.hasAttributes()){const t=[];for(const e of r.getAttributeNames())if(e.endsWith("$lit$")||e.startsWith(Kt)){const n=c[o++];if(t.push(e),void 0!==n){const t=r.getAttribute(n.toLowerCase()+"$lit$").split(Kt),e=/([.?@])?(.*)/.exec(n);a.push({type:1,index:i,name:e[2],strings:t,ctor:"."===e[1]?Ce:"?"===e[1]?Se:"@"===e[1]?Ae:we})}else a.push({type:6,index:i})}for(const e of t)r.removeAttribute(e)}if(ce.test(r.tagName)){const t=r.textContent.split(Kt),e=t.length-1;if(e>0){r.textContent=Zt?Zt.emptyScript:"";for(let n=0;n<e;n++)r.append(t[n],te()),ve.nextNode(),a.push({type:2,index:++i});r.append(t[e],te())}}}else if(8===r.nodeType)if(r.data===Qt)a.push({type:2,index:i});else{let t=-1;for(;-1!==(t=r.data.indexOf(Kt,t+1));)a.push({type:7,index:i}),t+=Kt.length-1}i++}}static createElement(t,e){const n=Xt.createElement("template");return n.innerHTML=t,n}}function _e(t,e,n=t,r){var i,o,s,a;if(e===he)return e;let u=void 0!==r?null===(i=n._$Co)||void 0===i?void 0:i[r]:n._$Cl;const c=ee(e)?void 0:e._$litDirective$;return(null==u?void 0:u.constructor)!==c&&(null===(o=null==u?void 0:u._$AO)||void 0===o||o.call(u,!1),void 0===c?u=void 0:(u=new c(t),u._$AT(t,n,r)),void 0!==r?(null!==(s=(a=n)._$Co)&&void 0!==s?s:a._$Co=[])[r]=u:n._$Cl=u),void 0!==u&&(e=_e(t,u._$AS(t,e.values),u,r)),e}class me{constructor(t,e){this.u=[],this._$AN=void 0,this._$AD=t,this._$AM=e}get parentNode(){return this._$AM.parentNode}get _$AU(){return this._$AM._$AU}v(t){var e;const{el:{content:n},parts:r}=this._$AD,i=(null!==(e=null==t?void 0:t.creationScope)&&void 0!==e?e:Xt).importNode(n,!0);ve.currentNode=i;let o=ve.nextNode(),s=0,a=0,u=r[0];for(;void 0!==u;){if(s===u.index){let e;2===u.type?e=new be(o,o.nextSibling,this,t):1===u.type?e=new u.ctor(o,u.name,u.strings,this,t):6===u.type&&(e=new xe(o,this,t)),this.u.push(e),u=r[++a]}s!==(null==u?void 0:u.index)&&(o=ve.nextNode(),s++)}return i}p(t){let e=0;for(const n of this.u)void 0!==n&&(void 0!==n.strings?(n._$AI(t,n,e),e+=n.strings.length-2):n._$AI(t[e])),e++}}class be{constructor(t,e,n,r){var i;this.type=2,this._$AH=pe,this._$AN=void 0,this._$AA=t,this._$AB=e,this._$AM=n,this.options=r,this._$Cm=null===(i=null==r?void 0:r.isConnected)||void 0===i||i}get _$AU(){var t,e;return null!==(e=null===(t=this._$AM)||void 0===t?void 0:t._$AU)&&void 0!==e?e:this._$Cm}get parentNode(){let t=this._$AA.parentNode;const e=this._$AM;return void 0!==e&&11===t.nodeType&&(t=e.parentNode),t}get startNode(){return this._$AA}get endNode(){return this._$AB}_$AI(t,e=this){t=_e(this,t,e),ee(t)?t===pe||null==t||""===t?(this._$AH!==pe&&this._$AR(),this._$AH=pe):t!==this._$AH&&t!==he&&this.g(t):void 0!==t._$litType$?this.$(t):void 0!==t.nodeType?this.T(t):(t=>ne(t)||"function"==typeof(null==t?void 0:t[Symbol.iterator]))(t)?this.k(t):this.g(t)}O(t,e=this._$AB){return this._$AA.parentNode.insertBefore(t,e)}T(t){this._$AH!==t&&(this._$AR(),this._$AH=this.O(t))}g(t){this._$AH!==pe&&ee(this._$AH)?this._$AA.nextSibling.data=t:this.T(Xt.createTextNode(t)),this._$AH=t}$(t){var e;const{values:n,_$litType$:r}=t,i="number"==typeof r?this._$AC(t):(void 0===r.el&&(r.el=ye.createElement(r.h,this.options)),r);if((null===(e=this._$AH)||void 0===e?void 0:e._$AD)===i)this._$AH.p(n);else{const t=new me(i,this),e=t.v(this.options);t.p(n),this.T(e),this._$AH=t}}_$AC(t){let e=de.get(t.strings);return void 0===e&&de.set(t.strings,e=new ye(t)),e}k(t){ne(this._$AH)||(this._$AH=[],this._$AR());const e=this._$AH;let n,r=0;for(const i of t)r===e.length?e.push(n=new be(this.O(te()),this.O(te()),this,this.options)):n=e[r],n._$AI(i),r++;r<e.length&&(this._$AR(n&&n._$AB.nextSibling,r),e.length=r)}_$AR(t=this._$AA.nextSibling,e){var n;for(null===(n=this._$AP)||void 0===n||n.call(this,!1,!0,e);t&&t!==this._$AB;){const e=t.nextSibling;t.remove(),t=e}}setConnected(t){var e;void 0===this._$AM&&(this._$Cm=t,null===(e=this._$AP)||void 0===e||e.call(this,t))}}class we{constructor(t,e,n,r,i){this.type=1,this._$AH=pe,this._$AN=void 0,this.element=t,this.name=e,this._$AM=r,this.options=i,n.length>2||""!==n[0]||""!==n[1]?(this._$AH=Array(n.length-1).fill(new String),this.strings=n):this._$AH=pe}get tagName(){return this.element.tagName}get _$AU(){return this._$AM._$AU}_$AI(t,e=this,n,r){const i=this.strings;let o=!1;if(void 0===i)t=_e(this,t,e,0),o=!ee(t)||t!==this._$AH&&t!==he,o&&(this._$AH=t);else{const r=t;let s,a;for(t=i[0],s=0;s<i.length-1;s++)a=_e(this,r[n+s],e,s),a===he&&(a=this._$AH[s]),o||(o=!ee(a)||a!==this._$AH[s]),a===pe?t=pe:t!==pe&&(t+=(null!=a?a:"")+i[s+1]),this._$AH[s]=a}o&&!r&&this.j(t)}j(t){t===pe?this.element.removeAttribute(this.name):this.element.setAttribute(this.name,null!=t?t:"")}}class Ce extends we{constructor(){super(...arguments),this.type=3}j(t){this.element[this.name]=t===pe?void 0:t}}const ke=Zt?Zt.emptyScript:"";class Se extends we{constructor(){super(...arguments),this.type=4}j(t){t&&t!==pe?this.element.setAttribute(this.name,ke):this.element.removeAttribute(this.name)}}class Ae extends we{constructor(t,e,n,r,i){super(t,e,n,r,i),this.type=5}_$AI(t,e=this){var n;if((t=null!==(n=_e(this,t,e,0))&&void 0!==n?n:pe)===he)return;const r=this._$AH,i=t===pe&&r!==pe||t.capture!==r.capture||t.once!==r.once||t.passive!==r.passive,o=t!==pe&&(r===pe||i);i&&this.element.removeEventListener(this.name,this,r),o&&this.element.addEventListener(this.name,this,t),this._$AH=t}handleEvent(t){var e,n;"function"==typeof this._$AH?this._$AH.call(null!==(n=null===(e=this.options)||void 0===e?void 0:e.host)&&void 0!==n?n:this.element,t):this._$AH.handleEvent(t)}}class xe{constructor(t,e,n){this.element=t,this.type=6,this._$AN=void 0,this._$AM=e,this.options=n}get _$AU(){return this._$AM._$AU}_$AI(t){_e(this,t)}}const $e=Jt.litHtmlPolyfillSupport;var Ee,Oe;null==$e||$e(ye,be),(null!==(Vt=Jt.litHtmlVersions)&&void 0!==Vt?Vt:Jt.litHtmlVersions=[]).push("2.6.1");class Re extends qt{constructor(){super(...arguments),this.renderOptions={host:this},this._$Do=void 0}createRenderRoot(){var t,e;const n=super.createRenderRoot();return null!==(t=(e=this.renderOptions).renderBefore)&&void 0!==t||(e.renderBefore=n.firstChild),n}update(t){const e=this.render();this.hasUpdated||(this.renderOptions.isConnected=this.isConnected),super.update(t),this._$Do=((t,e,n)=>{var r,i;const o=null!==(r=null==n?void 0:n.renderBefore)&&void 0!==r?r:e;let s=o._$litPart$;if(void 0===s){const t=null!==(i=null==n?void 0:n.renderBefore)&&void 0!==i?i:null;o._$litPart$=s=new be(e.insertBefore(te(),t),t,void 0,null!=n?n:{})}return s._$AI(t),s})(e,this.renderRoot,this.renderOptions)}connectedCallback(){var t;super.connectedCallback(),null===(t=this._$Do)||void 0===t||t.setConnected(!0)}disconnectedCallback(){var t;super.disconnectedCallback(),null===(t=this._$Do)||void 0===t||t.setConnected(!1)}render(){return he}}Re.finalized=!0,Re._$litElement$=!0,null===(Ee=globalThis.litElementHydrateSupport)||void 0===Ee||Ee.call(globalThis,{LitElement:Re});const Te=globalThis.litElementPolyfillSupport;null==Te||Te({LitElement:Re}),(null!==(Oe=globalThis.litElementVersions)&&void 0!==Oe?Oe:globalThis.litElementVersions=[]).push("3.2.2");class je extends Re{constructor(){super(...arguments),this.subscriptionTokens=[]}registerCallbacks(t){console.log("heyyyyy"),this.eventBus=t}registerCallback(t,e){this.eventBus?this.subscriptionTokens.push(this.eventBus.subscribe(t,e)):console.error("Attempting to register a callback before receiving an event bus")}unregisterCallbacks(){this.eventBus&&this.subscriptionTokens.forEach(this.eventBus.unsubscribe)}}var Pe=function(t,e,n,r){var i,o=arguments.length,s=o<3?e:null===r?r=Object.getOwnPropertyDescriptor(e,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,n,r);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,n,s):i(e,n))||s);return o>3&&s&&Object.defineProperty(e,n,s),s};let Me=class extends je{constructor(){super(...arguments),this.displayTime=8e3,this.delay=5e3,this.redemptionTitle="SetMePlease",this.canDisplay=!1,this.componentType="persistant",this.redemptionQueue=[],this.subscriptionTokens=[],this.handleRedeemEvent=(t,e)=>{void 0!==e&&e.name===z&&(this.redemptionQueue.push(e),this.startDisplayCycle())},this.displayTick=()=>{if(!this.canDisplay||!this.displayIntervalToken)return;const t=this.redemptionQueue.shift();t?this.currentRedemption=t:(this.currentRedemption=void 0,this.canDisplay=!1,clearInterval(this.displayIntervalToken),this.displayIntervalToken=void 0)}}registerCallbacks(t){super.registerCallbacks(t),this.registerCallback(z,this.handleRedeemEvent)}render(){return this.canDisplay&&void 0!==this.currentRedemption?this.displayRedemption():fe`<h1>redeem display : dafsdf</h1>`}disconnectedCallback(){this.unregisterCallbacks(),super.disconnectedCallback()}async startDisplayCycle(){this.displayIntervalToken||(await new Promise((t=>setTimeout(t,this.delay))),this.canDisplay=!0,this.displayIntervalToken=setInterval(this.displayTick,this.displayTime),this.displayTick())}displayRedemption(){return this.currentRedemption?fe`<slot
          name="${this.currentRedemption.reward.title}"
          .fromUser=${this.currentRedemption.user}
          .text=${this.currentRedemption.userInput}>
        </slot>`:""}};Pe([Et({attribute:"display-time",type:Number})],Me.prototype,"displayTime",void 0),Pe([Et({type:Number})],Me.prototype,"delay",void 0),Pe([Et()],Me.prototype,"redemptionTitle",void 0),Pe([Ot()],Me.prototype,"canDisplay",void 0),Me=Pe([xt("channel-point-redemption")],Me);var Ie=function(t,e,n,r){var i,o=arguments.length,s=o<3?e:null===r?r=Object.getOwnPropertyDescriptor(e,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,n,r);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,n,s):i(e,n))||s);return o>3&&s&&Object.defineProperty(e,n,s),s};let Fe=class extends je{constructor(){super(),this.displayTime=8e3,this.multiFollowThreshold=5,this.multiFollowShowCount=5,this.delay=5e3,this.singleFollowMessages=["New Follower!","New Friend!","Oh Hello!"],this.multiFollowMessages=["New Followers!","New Friends!","Oh Hello!"],this.canDisplay=!1,this.componentType="persistant",this.newFollowBuffer=[],this.nextFollowersToDisplay=[],this.subscriptionTokens=[],this.handleFollowEvent=(t,e)=>{void 0!==e&&e.name===U&&(this.newFollowBuffer.push(e.user_name),this.startDisplayCycle())},this.displayTick=()=>{if(!this.canDisplay||!this.displayIntervalToken)return;if(this.newFollowBuffer.length>=this.multiFollowThreshold)return this.nextFollowersToDisplay=$().slice(this.newFollowBuffer,0,this.multiFollowShowCount),void(this.newFollowBuffer=$().drop(this.newFollowBuffer,this.nextFollowersToDisplay.length));const t=this.newFollowBuffer.shift();t?this.nextFollowersToDisplay=[t]:(this.nextFollowersToDisplay=[],this.canDisplay=!1,clearInterval(this.displayIntervalToken),this.displayIntervalToken=void 0)}}registerCallbacks(t){console.log("in follow register"),super.registerCallbacks(t),this.registerCallback(U,this.handleFollowEvent)}render(){return this.canDisplay&&0!==this.nextFollowersToDisplay.length?1===this.nextFollowersToDisplay.length?this.displaySingleFollow():this.displayMultiFollow():""}disconnectedCallback(){this.unregisterCallbacks(),super.disconnectedCallback()}async startDisplayCycle(){this.displayIntervalToken||(await new Promise((t=>setTimeout(t,this.delay))),this.canDisplay=!0,this.displayIntervalToken=setInterval(this.displayTick,this.displayTime),this.displayTick())}displaySingleFollow(){if(this.nextFollowersToDisplay){const e=this.selectMessage(this.singleFollowMessages);return t=this.nextFollowersToDisplay[0],fe`
<div class="overlay-event overlay-event__follow">
    <h1>${e}</h1>
    ${t}
</div>
`}var t;return""}displayMultiFollow(){if(this.nextFollowersToDisplay){const e=this.selectMessage(this.multiFollowMessages);return t=this.nextFollowersToDisplay,fe`
<div class="overlay-event overlay-event__follow">
    <h1>${e}</h1>
    <ul class="follower_list">
        ${t.map((t=>fe`<li>${t}</li>`))}
    </ul>
</div>
`}var t;return""}selectMessage(t){return t[$().random(0,t.length-1,!1)]||"Hi!"}};Ie([Et({attribute:"display-time",type:Number})],Fe.prototype,"displayTime",void 0),Ie([Et({type:Number})],Fe.prototype,"multiFollowThreshold",void 0),Ie([Et({type:Number})],Fe.prototype,"multiFollowShowCount",void 0),Ie([Et({type:Number})],Fe.prototype,"delay",void 0),Ie([Et({type:Array})],Fe.prototype,"singleFollowMessages",void 0),Ie([Et({type:Array})],Fe.prototype,"multiFollowMessages",void 0),Ie([Ot()],Fe.prototype,"canDisplay",void 0),Ie([Ot()],Fe.prototype,"nextFollowersToDisplay",void 0),Fe=Ie([xt("follow-notification")],Fe);const Ne=Fe;var Be=function(t,e,n,r){var i,o=arguments.length,s=o<3?e:null===r?r=Object.getOwnPropertyDescriptor(e,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,n,r);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,n,s):i(e,n))||s);return o>3&&s&&Object.defineProperty(e,n,s),s};let Ue=class extends Re{render(){return fe`<div class="chat-message">
        <span class="chat-user">${this.fromUser.userName}</span>
        <span class="chat-text">${t=this.contents,e=document.createElement("div"),e.innerHTML=t,e.textContent||e.innerText}</span>
      </div>`;var t,e}};Be([Et()],Ue.prototype,"fromUser",void 0),Be([Et()],Ue.prototype,"contents",void 0),Ue=Be([xt("chat-message-display")],Ue);var ze=function(t,e,n,r){var i,o=arguments.length,s=o<3?e:null===r?r=Object.getOwnPropertyDescriptor(e,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,n,r);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,n,s):i(e,n))||s);return o>3&&s&&Object.defineProperty(e,n,s),s};let Le=class extends je{constructor(){super(...arguments),this.componentType="persistant",this.messages=[],this.maxMessages=10,this.handleMessageReceived=(t,e)=>{R(e)?this.addMessage(JSON.stringify(e)):this.addMessage(`Non-system message: ${t}: ${JSON.stringify(e)}`)}}registerCallbacks(t){super.registerCallbacks(t),this.registerCallback("*",this.handleMessageReceived)}render(){return t={messages:this.messages},fe`
<div class="overlay-persistant overlay-persistant__debug">
    <h3>Debug log</h3>
    <ul>
    ${function*(t,e){if(void 0!==t){let e=0;for(const r of t)yield(n=r,e++,fe`<li>${n}</li>`)}var n}(t.messages.slice(0).reverse()||[])}
    </ul>
</div>
`;var t}addMessage(t){this.messages.unshift(t),this.messages=this.messages.slice(0,this.maxMessages)}};ze([Ot()],Le.prototype,"messages",void 0),ze([Et({attribute:"max-messages",type:Number})],Le.prototype,"maxMessages",void 0),Le=ze([xt("debug-container")],Le);const We=Le;let De=class extends je{constructor(){super(...arguments),this.componentType="persistant"}registerCallbacks(t){super.registerCallbacks(t)}sendSceneRequest(){const t={name:N,type:"obsRequest",sceneName:"SHOW MAIN UPPER"};console.log("dispatching!",t),this.eventBus?.publish(N,t),console.log("Dispatchedded!")}render(){return fe`
    <div class="overlay-persistant overlay-persistant__control">
        <h3>Controls</h3>
        <ul>
            <button @click=${this.sendSceneRequest}>Change Scene</button>
        </ul>
    </div>
`}};De=function(t,e,n,r){var i,o=arguments.length,s=o<3?e:null===r?r=Object.getOwnPropertyDescriptor(e,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,n,r);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,n,s):i(e,n))||s);return o>3&&s&&Object.defineProperty(e,n,s),s}([xt("control-element")],De);const He=De;S(q,Ct.controlWorker,X.frameworkEventBus);const qe=new k;qe.extend(kt),qe.bind(Ct.overlayController).toInstance(q).inSingletonScope(),(t=>{We.prototype,Ne.prototype,He.prototype;const e=t.get(Ct.overlayController);window.addEventListener("load",(()=>e.init(O("overlayController",{}))))})(qe)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,